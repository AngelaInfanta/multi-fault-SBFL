diff --git a/defects4j.build.properties b/defects4j.build.properties
index 22a4590..ff65a36 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=49
+d4j.classes.instrument=org/apache/commons/math/Field.class,org/apache/commons/math/Field\$*.class,org/apache/commons/math/FieldElement.class,org/apache/commons/math/FieldElement\$*.class,org/apache/commons/math/analysis/BivariateRealFunction.class,org/apache/commons/math/analysis/BivariateRealFunction\$*.class,org/apache/commons/math/analysis/UnivariateRealFunction.class,org/apache/commons/math/analysis/UnivariateRealFunction\$*.class,org/apache/commons/math/exception/ConvergenceException.class,org/apache/commons/math/exception/ConvergenceException\$*.class,org/apache/commons/math/exception/DimensionMismatchException.class,org/apache/commons/math/exception/DimensionMismatchException\$*.class,org/apache/commons/math/exception/MathArithmeticException.class,org/apache/commons/math/exception/MathArithmeticException\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MathIllegalStateException.class,org/apache/commons/math/exception/MathIllegalStateException\$*.class,org/apache/commons/math/exception/NotFiniteNumberException.class,org/apache/commons/math/exception/NotFiniteNumberException\$*.class,org/apache/commons/math/exception/NullArgumentException.class,org/apache/commons/math/exception/NullArgumentException\$*.class,org/apache/commons/math/exception/OutOfRangeException.class,org/apache/commons/math/exception/OutOfRangeException\$*.class,org/apache/commons/math/exception/ZeroException.class,org/apache/commons/math/exception/ZeroException\$*.class,org/apache/commons/math/exception/util/ExceptionContextProvider.class,org/apache/commons/math/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/exception/util/LocalizedFormats.class,org/apache/commons/math/exception/util/LocalizedFormats\$*.class,org/apache/commons/math/fraction/BigFraction.class,org/apache/commons/math/fraction/BigFraction\$*.class,org/apache/commons/math/fraction/FractionConversionException.class,org/apache/commons/math/fraction/FractionConversionException\$*.class,org/apache/commons/math/linear/AbstractRealMatrix.class,org/apache/commons/math/linear/AbstractRealMatrix\$*.class,org/apache/commons/math/linear/AbstractRealVector.class,org/apache/commons/math/linear/AbstractRealVector\$*.class,org/apache/commons/math/linear/AnyMatrix.class,org/apache/commons/math/linear/AnyMatrix\$*.class,org/apache/commons/math/linear/Array2DRowRealMatrix.class,org/apache/commons/math/linear/Array2DRowRealMatrix\$*.class,org/apache/commons/math/linear/OpenMapRealMatrix.class,org/apache/commons/math/linear/OpenMapRealMatrix\$*.class,org/apache/commons/math/linear/OpenMapRealVector.class,org/apache/commons/math/linear/OpenMapRealVector\$*.class,org/apache/commons/math/linear/RealLinearOperator.class,org/apache/commons/math/linear/RealLinearOperator\$*.class,org/apache/commons/math/linear/RealMatrix.class,org/apache/commons/math/linear/RealMatrix\$*.class,org/apache/commons/math/linear/RealVector.class,org/apache/commons/math/linear/RealVector\$*.class,org/apache/commons/math/linear/SparseRealMatrix.class,org/apache/commons/math/linear/SparseRealMatrix\$*.class,org/apache/commons/math/linear/SparseRealVector.class,org/apache/commons/math/linear/SparseRealVector\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class,org/apache/commons/math/util/OpenIntToDoubleHashMap.class,org/apache/commons/math/util/OpenIntToDoubleHashMap\$*.class
 d4j.classes.modified=org.apache.commons.math.linear.OpenMapRealVector
 d4j.classes.relevant=org.apache.commons.math.analysis.BivariateRealFunction,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.exception.DimensionMismatchException,org.apache.commons.math.exception.MathArithmeticException,org.apache.commons.math.exception.MathIllegalArgumentException,org.apache.commons.math.exception.MathIllegalNumberException,org.apache.commons.math.exception.OutOfRangeException,org.apache.commons.math.exception.util.ExceptionContextProvider,org.apache.commons.math.exception.util.Localizable,org.apache.commons.math.linear.AbstractRealMatrix,org.apache.commons.math.linear.AbstractRealVector,org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.Array2DRowRealMatrix,org.apache.commons.math.linear.OpenMapRealMatrix,org.apache.commons.math.linear.OpenMapRealVector,org.apache.commons.math.linear.RealLinearOperator,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealVector,org.apache.commons.math.linear.SparseRealMatrix,org.apache.commons.math.linear.SparseRealVector,org.apache.commons.math.util.FastMath,org.apache.commons.math.util.OpenIntToDoubleHashMap
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
index 05f85bc..79c6ef7 100644
--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
@@ -596,5 +596,25 @@ public class BigFractionTest {
             Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));
         }
     }
+    @Test
+    public void testFloatValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.floatValue(), 1e-15);
+    }
+    @Test
+    public void testDoubleValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.doubleValue(), 1e-15);
+    }
 
 }
