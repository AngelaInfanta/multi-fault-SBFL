--- Insert: testBinomialCoefficientLarge
871a872,921
>     public void testBinomialCoefficientLarge() throws Exception {
>         // This tests all legal and illegal values for n <= 200.
>         for (int n = 0; n <= 200; n++) {
>             for (int k = 0; k <= n; k++) {
>                 long ourResult = -1;
>                 long exactResult = -1;
>                 boolean shouldThrow = false;
>                 boolean didThrow = false;
>                 try {
>                     ourResult = MathUtils.binomialCoefficient(n, k);
>                 } catch (ArithmeticException ex) {
>                     didThrow = true;
>                 }
>                 try {
>                     exactResult = binomialCoefficient(n, k);
>                 } catch (ArithmeticException ex) {
>                     shouldThrow = true;
>                 }
>                 assertEquals(n+","+k, shouldThrow, didThrow);
>                 assertEquals(n+","+k, exactResult, ourResult);
>                 assertTrue(n+","+k, (n > 66 || !didThrow));
>             }
>         }
> 
>         long ourResult = MathUtils.binomialCoefficient(300, 3);
>         long exactResult = binomialCoefficient(300, 3);
>         assertEquals(exactResult, ourResult);
> 
>         ourResult = MathUtils.binomialCoefficient(700, 697);
>         exactResult = binomialCoefficient(700, 697);
>         assertEquals(exactResult, ourResult);
> 
>         // This one should throw
>         try {
>             MathUtils.binomialCoefficient(700, 300);
>             fail("Expecting ArithmeticException");
>         } catch (ArithmeticException ex) {
>             // Expected
>         }
> 
>         // Larger values cannot be computed directly by our
>         // test implementation because of stack limitations,
>         // so we make little jumps to fill the cache.
>         for (int i = 2000; i <= 10000; i += 2000) {
>             ourResult = MathUtils.binomialCoefficient(i, 3);
>             exactResult = binomialCoefficient(i, 3);
>             assertEquals(exactResult, ourResult);
>         }
> 
>     }
