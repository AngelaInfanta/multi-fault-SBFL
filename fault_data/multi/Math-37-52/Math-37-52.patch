diff --git a/defects4j.build.properties b/defects4j.build.properties
index 27a382e..07b6561 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=52
+d4j.classes.instrument=org/apache/commons/math/Field.class,org/apache/commons/math/Field\$*.class,org/apache/commons/math/FieldElement.class,org/apache/commons/math/FieldElement\$*.class,org/apache/commons/math/MathException.class,org/apache/commons/math/MathException\$*.class,org/apache/commons/math/complex/Complex.class,org/apache/commons/math/complex/Complex\$*.class,org/apache/commons/math/exception/DimensionMismatchException.class,org/apache/commons/math/exception/DimensionMismatchException\$*.class,org/apache/commons/math/exception/MathArithmeticException.class,org/apache/commons/math/exception/MathArithmeticException\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MathThrowable.class,org/apache/commons/math/exception/MathThrowable\$*.class,org/apache/commons/math/exception/NonMonotonousSequenceException.class,org/apache/commons/math/exception/NonMonotonousSequenceException\$*.class,org/apache/commons/math/exception/NotFiniteNumberException.class,org/apache/commons/math/exception/NotFiniteNumberException\$*.class,org/apache/commons/math/exception/NotPositiveException.class,org/apache/commons/math/exception/NotPositiveException\$*.class,org/apache/commons/math/exception/NullArgumentException.class,org/apache/commons/math/exception/NullArgumentException\$*.class,org/apache/commons/math/exception/NumberIsTooLargeException.class,org/apache/commons/math/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math/exception/NumberIsTooSmallException.class,org/apache/commons/math/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math/exception/util/ExceptionContextProvider.class,org/apache/commons/math/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/geometry/Space.class,org/apache/commons/math/geometry/Space\$*.class,org/apache/commons/math/geometry/Vector.class,org/apache/commons/math/geometry/Vector\$*.class,org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException.class,org/apache/commons/math/geometry/euclidean/threed/CardanEulerSingularityException\$*.class,org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException.class,org/apache/commons/math/geometry/euclidean/threed/NotARotationMatrixException\$*.class,org/apache/commons/math/geometry/euclidean/threed/Rotation.class,org/apache/commons/math/geometry/euclidean/threed/Rotation\$*.class,org/apache/commons/math/geometry/euclidean/threed/Vector3D.class,org/apache/commons/math/geometry/euclidean/threed/Vector3D\$*.class,org/apache/commons/math/stat/inference/ChiSquareTest.class,org/apache/commons/math/stat/inference/ChiSquareTest\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class,org/apache/commons/math/util/FastMathLiteralArrays.class,org/apache/commons/math/util/FastMathLiteralArrays\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class
 d4j.classes.modified=org.apache.commons.math.geometry.euclidean.threed.Rotation
 d4j.classes.relevant=org.apache.commons.math.exception.DimensionMismatchException,org.apache.commons.math.exception.MathArithmeticException,org.apache.commons.math.exception.MathIllegalArgumentException,org.apache.commons.math.exception.MathIllegalNumberException,org.apache.commons.math.exception.MathThrowable,org.apache.commons.math.exception.NonMonotonousSequenceException,org.apache.commons.math.exception.NotFiniteNumberException,org.apache.commons.math.exception.NotPositiveException,org.apache.commons.math.exception.NullArgumentException,org.apache.commons.math.exception.NumberIsTooLargeException,org.apache.commons.math.exception.NumberIsTooSmallException,org.apache.commons.math.exception.util.ExceptionContextProvider,org.apache.commons.math.exception.util.Localizable,org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException,org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException,org.apache.commons.math.geometry.euclidean.threed.Rotation,org.apache.commons.math.geometry.euclidean.threed.Vector3D,org.apache.commons.math.geometry.Space,org.apache.commons.math.geometry.Vector,org.apache.commons.math.MathException,org.apache.commons.math.util.FastMath,org.apache.commons.math.util.MathUtils
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/complex/ComplexTest.java b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
index fe8ef69..00ae3ae 100644
--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java
+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
@@ -947,6 +947,13 @@ public class ComplexTest {
         Complex z = new Complex(3, 4);
         Complex expected = new Complex(-0.000187346, 0.999356);
         TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
+        /* Check that no overflow occurs (MATH-722) */
+        Complex actual = new Complex(3.0, 1E10).tan();
+        expected = new Complex(0, 1);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
+        actual = new Complex(3.0, -1E10).tan();
+        expected = new Complex(0, -1);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
     }
 
     @Test
@@ -956,8 +963,8 @@ public class ComplexTest {
 
     @Test
     public void testTanInf() {
-        TestUtils.assertSame(zeroNaN, oneInf.tan());
-        TestUtils.assertSame(zeroNaN, oneNegInf.tan());
+        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
+        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());
         TestUtils.assertSame(Complex.NaN, infOne.tan());
         TestUtils.assertSame(Complex.NaN, negInfOne.tan());
         TestUtils.assertSame(Complex.NaN, infInf.tan());
@@ -977,6 +984,13 @@ public class ComplexTest {
         Complex z = new Complex(3, 4);
         Complex expected = new Complex(1.00071, 0.00490826);
         TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
+        /* Check that no overflow occurs (MATH-722) */
+        Complex actual = new Complex(1E10, 3.0).tanh();
+        expected = new Complex(1, 0);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
+        actual = new Complex(-1E10, 3.0).tanh();
+        expected = new Complex(-1, 0);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
     }
 
     @Test
@@ -988,8 +1002,8 @@ public class ComplexTest {
     public void testTanhInf() {
         TestUtils.assertSame(Complex.NaN, oneInf.tanh());
         TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
-        TestUtils.assertSame(nanZero, infOne.tanh());
-        TestUtils.assertSame(nanZero, negInfOne.tanh());
+        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
+        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());
         TestUtils.assertSame(Complex.NaN, infInf.tanh());
         TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
         TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
