diff --git a/defects4j.build.properties b/defects4j.build.properties
index f375323..ebea4c3 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=68
+d4j.classes.instrument=org/apache/commons/math/ConvergenceException.class,org/apache/commons/math/ConvergenceException\$*.class,org/apache/commons/math/FunctionEvaluationException.class,org/apache/commons/math/FunctionEvaluationException\$*.class,org/apache/commons/math/MathException.class,org/apache/commons/math/MathException\$*.class,org/apache/commons/math/MathRuntimeException.class,org/apache/commons/math/MathRuntimeException\$*.class,org/apache/commons/math/MaxEvaluationsExceededException.class,org/apache/commons/math/MaxEvaluationsExceededException\$*.class,org/apache/commons/math/MaxIterationsExceededException.class,org/apache/commons/math/MaxIterationsExceededException\$*.class,org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction.class,org/apache/commons/math/analysis/DifferentiableMultivariateVectorialFunction\$*.class,org/apache/commons/math/analysis/MultivariateMatrixFunction.class,org/apache/commons/math/analysis/MultivariateMatrixFunction\$*.class,org/apache/commons/math/analysis/MultivariateVectorialFunction.class,org/apache/commons/math/analysis/MultivariateVectorialFunction\$*.class,org/apache/commons/math/analysis/UnivariateRealFunction.class,org/apache/commons/math/analysis/UnivariateRealFunction\$*.class,org/apache/commons/math/distribution/AbstractContinuousDistribution.class,org/apache/commons/math/distribution/AbstractContinuousDistribution\$*.class,org/apache/commons/math/distribution/AbstractDistribution.class,org/apache/commons/math/distribution/AbstractDistribution\$*.class,org/apache/commons/math/distribution/ContinuousDistribution.class,org/apache/commons/math/distribution/ContinuousDistribution\$*.class,org/apache/commons/math/distribution/DiscreteDistribution.class,org/apache/commons/math/distribution/DiscreteDistribution\$*.class,org/apache/commons/math/distribution/Distribution.class,org/apache/commons/math/distribution/Distribution\$*.class,org/apache/commons/math/distribution/IntegerDistribution.class,org/apache/commons/math/distribution/IntegerDistribution\$*.class,org/apache/commons/math/distribution/NormalDistribution.class,org/apache/commons/math/distribution/NormalDistribution\$*.class,org/apache/commons/math/distribution/NormalDistributionImpl.class,org/apache/commons/math/distribution/NormalDistributionImpl\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MathThrowable.class,org/apache/commons/math/exception/MathThrowable\$*.class,org/apache/commons/math/exception/NotStrictlyPositiveException.class,org/apache/commons/math/exception/NotStrictlyPositiveException\$*.class,org/apache/commons/math/exception/NumberIsTooLargeException.class,org/apache/commons/math/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math/exception/NumberIsTooSmallException.class,org/apache/commons/math/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math/exception/OutOfRangeException.class,org/apache/commons/math/exception/OutOfRangeException\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/linear/InvalidMatrixException.class,org/apache/commons/math/linear/InvalidMatrixException\$*.class,org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer.class,org/apache/commons/math/optimization/DifferentiableMultivariateVectorialOptimizer\$*.class,org/apache/commons/math/optimization/OptimizationException.class,org/apache/commons/math/optimization/OptimizationException\$*.class,org/apache/commons/math/optimization/SimpleVectorialValueChecker.class,org/apache/commons/math/optimization/SimpleVectorialValueChecker\$*.class,org/apache/commons/math/optimization/VectorialConvergenceChecker.class,org/apache/commons/math/optimization/VectorialConvergenceChecker\$*.class,org/apache/commons/math/optimization/VectorialPointValuePair.class,org/apache/commons/math/optimization/VectorialPointValuePair\$*.class,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.class,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer\$*.class,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.class,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer\$*.class,org/apache/commons/math/random/RandomData.class,org/apache/commons/math/random/RandomData\$*.class,org/apache/commons/math/random/RandomDataImpl.class,org/apache/commons/math/random/RandomDataImpl\$*.class,org/apache/commons/math/random/RandomGenerator.class,org/apache/commons/math/random/RandomGenerator\$*.class,org/apache/commons/math/special/Erf.class,org/apache/commons/math/special/Erf\$*.class,org/apache/commons/math/special/Gamma.class,org/apache/commons/math/special/Gamma\$*.class,org/apache/commons/math/util/ContinuedFraction.class,org/apache/commons/math/util/ContinuedFraction\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class
 d4j.classes.modified=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer
 d4j.classes.relevant=org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,org.apache.commons.math.analysis.MultivariateMatrixFunction,org.apache.commons.math.analysis.MultivariateVectorialFunction,org.apache.commons.math.ConvergenceException,org.apache.commons.math.FunctionEvaluationException,org.apache.commons.math.linear.InvalidMatrixException,org.apache.commons.math.MathException,org.apache.commons.math.MathRuntimeException,org.apache.commons.math.MaxEvaluationsExceededException,org.apache.commons.math.MaxIterationsExceededException,org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer,org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer,org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,org.apache.commons.math.optimization.OptimizationException,org.apache.commons.math.optimization.SimpleVectorialValueChecker,org.apache.commons.math.optimization.VectorialConvergenceChecker,org.apache.commons.math.optimization.VectorialPointValuePair
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
index b1e9980..0281cab 100644
--- a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
+++ b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
@@ -166,13 +166,13 @@ public class NormalDistributionTest extends ContinuousDistributionAbstractTest
      * Verifies fix for JIRA MATH-167
      */
     public void testExtremeValues() throws Exception {
-        NormalDistribution distribution = (NormalDistribution) getDistribution();
-        distribution.setMean(0);
-        distribution.setStandardDeviation(1);
-        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
+        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
+        for (int i = 0; i < 100; i++) { // make sure no convergence exception
             double lowerTail = distribution.cumulativeProbability(-i);
             double upperTail = distribution.cumulativeProbability(i);
-            if (i < 10) { // make sure not top-coded
+            if (i < 9) { // make sure not top-coded 
+                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
+                // TODO: once MATH-364 is resolved, replace 9 with 30
                 assertTrue(lowerTail > 0.0d);
                 assertTrue(upperTail < 1.0d);
             }
@@ -181,6 +181,12 @@ public class NormalDistributionTest extends ContinuousDistributionAbstractTest
                 assertTrue(upperTail > 0.99999);
             }
         }
+        
+        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);
+        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);
+        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);
+        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);
+        
    }
 
     public void testMath280() throws MathException {
