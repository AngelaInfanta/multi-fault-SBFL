diff --git a/defects4j.build.properties b/defects4j.build.properties
index b9465e5..b8112df 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=39
+d4j.classes.instrument=org/apache/commons/math/Field.class,org/apache/commons/math/Field\$*.class,org/apache/commons/math/FieldElement.class,org/apache/commons/math/FieldElement\$*.class,org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolver\$*.class,org/apache/commons/math/exception/ConvergenceException.class,org/apache/commons/math/exception/ConvergenceException\$*.class,org/apache/commons/math/exception/DimensionMismatchException.class,org/apache/commons/math/exception/DimensionMismatchException\$*.class,org/apache/commons/math/exception/MathArithmeticException.class,org/apache/commons/math/exception/MathArithmeticException\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MathIllegalStateException.class,org/apache/commons/math/exception/MathIllegalStateException\$*.class,org/apache/commons/math/exception/MaxCountExceededException.class,org/apache/commons/math/exception/MaxCountExceededException\$*.class,org/apache/commons/math/exception/NotFiniteNumberException.class,org/apache/commons/math/exception/NotFiniteNumberException\$*.class,org/apache/commons/math/exception/NullArgumentException.class,org/apache/commons/math/exception/NullArgumentException\$*.class,org/apache/commons/math/exception/NumberIsTooSmallException.class,org/apache/commons/math/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math/exception/ZeroException.class,org/apache/commons/math/exception/ZeroException\$*.class,org/apache/commons/math/exception/util/ExceptionContextProvider.class,org/apache/commons/math/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/exception/util/LocalizedFormats.class,org/apache/commons/math/exception/util/LocalizedFormats\$*.class,org/apache/commons/math/fraction/BigFraction.class,org/apache/commons/math/fraction/BigFraction\$*.class,org/apache/commons/math/fraction/FractionConversionException.class,org/apache/commons/math/fraction/FractionConversionException\$*.class,org/apache/commons/math/ode/AbstractIntegrator.class,org/apache/commons/math/ode/AbstractIntegrator\$*.class,org/apache/commons/math/ode/EquationsMapper.class,org/apache/commons/math/ode/EquationsMapper\$*.class,org/apache/commons/math/ode/ExpandableStatefulODE.class,org/apache/commons/math/ode/ExpandableStatefulODE\$*.class,org/apache/commons/math/ode/FirstOrderDifferentialEquations.class,org/apache/commons/math/ode/FirstOrderDifferentialEquations\$*.class,org/apache/commons/math/ode/FirstOrderIntegrator.class,org/apache/commons/math/ode/FirstOrderIntegrator\$*.class,org/apache/commons/math/ode/ODEIntegrator.class,org/apache/commons/math/ode/ODEIntegrator\$*.class,org/apache/commons/math/ode/events/EventHandler.class,org/apache/commons/math/ode/events/EventHandler\$*.class,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.class,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator\$*.class,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.class,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator\$*.class,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.class,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator\$*.class,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.class,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator\$*.class,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.class,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator\$*.class,org/apache/commons/math/ode/sampling/AbstractStepInterpolator.class,org/apache/commons/math/ode/sampling/AbstractStepInterpolator\$*.class,org/apache/commons/math/ode/sampling/StepHandler.class,org/apache/commons/math/ode/sampling/StepHandler\$*.class,org/apache/commons/math/ode/sampling/StepInterpolator.class,org/apache/commons/math/ode/sampling/StepInterpolator\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class,org/apache/commons/math/util/FastMathLiteralArrays.class,org/apache/commons/math/util/FastMathLiteralArrays\$*.class,org/apache/commons/math/util/Incrementor.class,org/apache/commons/math/util/Incrementor\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class,org/apache/commons/math/util/Precision.class,org/apache/commons/math/util/Precision\$*.class
 d4j.classes.modified=org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator
 d4j.classes.relevant=org.apache.commons.math.analysis.solvers.BaseUnivariateRealSolver,org.apache.commons.math.analysis.solvers.UnivariateRealSolver,org.apache.commons.math.exception.DimensionMismatchException,org.apache.commons.math.exception.MathArithmeticException,org.apache.commons.math.exception.MathIllegalArgumentException,org.apache.commons.math.exception.MathIllegalNumberException,org.apache.commons.math.exception.MathIllegalStateException,org.apache.commons.math.exception.MaxCountExceededException,org.apache.commons.math.exception.NumberIsTooSmallException,org.apache.commons.math.exception.util.ExceptionContextProvider,org.apache.commons.math.exception.util.Localizable,org.apache.commons.math.ode.AbstractIntegrator,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.events.EventHandler,org.apache.commons.math.ode.ExpandableStatefulODE,org.apache.commons.math.ode.FirstOrderDifferentialEquations,org.apache.commons.math.ode.FirstOrderIntegrator,org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator,org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator,org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator,org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator,org.apache.commons.math.ode.ODEIntegrator,org.apache.commons.math.ode.sampling.AbstractStepInterpolator,org.apache.commons.math.ode.sampling.StepHandler,org.apache.commons.math.ode.sampling.StepInterpolator,org.apache.commons.math.util.FastMath,org.apache.commons.math.util.FastMathLiteralArrays,org.apache.commons.math.util.Incrementor,org.apache.commons.math.util.Precision
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
index 42051ca..75f392f 100644
--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
@@ -596,5 +596,25 @@ public class BigFractionTest {
             Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));
         }
     }
+    @Test
+    public void testFloatValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.floatValue(), 1e-15);
+    }
+    @Test
+    public void testDoubleValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.doubleValue(), 1e-15);
+    }
 
 }
