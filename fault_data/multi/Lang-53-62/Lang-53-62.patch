diff --git a/defects4j.build.properties b/defects4j.build.properties
index c01852e..8d0d1ff 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=62
+d4j.classes.instrument=org/apache/commons/lang/Entities.class,org/apache/commons/lang/Entities\$*.class,org/apache/commons/lang/IntHashMap.class,org/apache/commons/lang/IntHashMap\$*.class,org/apache/commons/lang/time/DateUtils.class,org/apache/commons/lang/time/DateUtils\$*.class
 d4j.classes.modified=org.apache.commons.lang.Entities
 d4j.classes.relevant=org.apache.commons.lang.Entities,org.apache.commons.lang.IntHashMap
 d4j.dir.src.classes=src/java
diff --git a/src/test/org/apache/commons/lang/time/DateUtilsTest.java b/src/test/org/apache/commons/lang/time/DateUtilsTest.java
index 352e824..dc31b54 100644
--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java
+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java
@@ -1129,5 +1129,63 @@ public class DateUtilsTest extends TestCase {
     void warn(String msg) {
         System.err.println(msg);
     }
+    public void testRoundLang346() throws Exception
+    {
+        TimeZone.setDefault(defaultZone);
+        dateTimeParser.setTimeZone(defaultZone);
+        Calendar testCalendar = Calendar.getInstance();
+        testCalendar.set(2007, 6, 2, 8, 8, 50);
+        Date date = testCalendar.getTime();
+        assertEquals("Minute Round Up Failed",
+                     dateTimeParser.parse("July 2, 2007 08:09:00.000"),
+                     DateUtils.round(date, Calendar.MINUTE));
+
+        testCalendar.set(2007, 6, 2, 8, 8, 20);
+        date = testCalendar.getTime();
+        assertEquals("Minute No Round Failed",
+                     dateTimeParser.parse("July 2, 2007 08:08:00.000"),
+                     DateUtils.round(date, Calendar.MINUTE));
+
+        testCalendar.set(2007, 6, 2, 8, 8, 50);
+        testCalendar.set(Calendar.MILLISECOND, 600);
+        date = testCalendar.getTime();
+
+        assertEquals("Second Round Up with 600 Milli Seconds Failed",
+                     dateTimeParser.parse("July 2, 2007 08:08:51.000"),
+                     DateUtils.round(date, Calendar.SECOND));
+
+        testCalendar.set(2007, 6, 2, 8, 8, 50);
+        testCalendar.set(Calendar.MILLISECOND, 200);
+        date = testCalendar.getTime();
+        assertEquals("Second Round Down with 200 Milli Seconds Failed",
+                     dateTimeParser.parse("July 2, 2007 08:08:50.000"),
+                     DateUtils.round(date, Calendar.SECOND));
+
+        testCalendar.set(2007, 6, 2, 8, 8, 20);
+        testCalendar.set(Calendar.MILLISECOND, 600);
+        date = testCalendar.getTime();
+        assertEquals("Second Round Up with 200 Milli Seconds Failed",
+                     dateTimeParser.parse("July 2, 2007 08:08:21.000"),
+                     DateUtils.round(date, Calendar.SECOND));
+
+        testCalendar.set(2007, 6, 2, 8, 8, 20);
+        testCalendar.set(Calendar.MILLISECOND, 200);
+        date = testCalendar.getTime();
+        assertEquals("Second Round Down with 200 Milli Seconds Failed",
+                     dateTimeParser.parse("July 2, 2007 08:08:20.000"),
+                     DateUtils.round(date, Calendar.SECOND));
+
+        testCalendar.set(2007, 6, 2, 8, 8, 50);
+        date = testCalendar.getTime();
+        assertEquals("Hour Round Down Failed",
+                     dateTimeParser.parse("July 2, 2007 08:00:00.000"),
+                     DateUtils.round(date, Calendar.HOUR));
+
+        testCalendar.set(2007, 6, 2, 8, 31, 50);
+        date = testCalendar.getTime();
+        assertEquals("Hour Round Up Failed",
+                     dateTimeParser.parse("July 2, 2007 09:00:00.000"),
+                     DateUtils.round(date, Calendar.HOUR));
+    }
 }
 
