diff --git a/defects4j.build.properties b/defects4j.build.properties
index 69e1f55..f1ccf7d 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=41
+d4j.classes.instrument=org/apache/commons/math/Field.class,org/apache/commons/math/Field\$*.class,org/apache/commons/math/FieldElement.class,org/apache/commons/math/FieldElement\$*.class,org/apache/commons/math/exception/ConvergenceException.class,org/apache/commons/math/exception/ConvergenceException\$*.class,org/apache/commons/math/exception/DimensionMismatchException.class,org/apache/commons/math/exception/DimensionMismatchException\$*.class,org/apache/commons/math/exception/MathArithmeticException.class,org/apache/commons/math/exception/MathArithmeticException\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MathIllegalStateException.class,org/apache/commons/math/exception/MathIllegalStateException\$*.class,org/apache/commons/math/exception/NotFiniteNumberException.class,org/apache/commons/math/exception/NotFiniteNumberException\$*.class,org/apache/commons/math/exception/NotPositiveException.class,org/apache/commons/math/exception/NotPositiveException\$*.class,org/apache/commons/math/exception/NullArgumentException.class,org/apache/commons/math/exception/NullArgumentException\$*.class,org/apache/commons/math/exception/NumberIsTooLargeException.class,org/apache/commons/math/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math/exception/NumberIsTooSmallException.class,org/apache/commons/math/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math/exception/ZeroException.class,org/apache/commons/math/exception/ZeroException\$*.class,org/apache/commons/math/exception/util/ExceptionContextProvider.class,org/apache/commons/math/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/exception/util/LocalizedFormats.class,org/apache/commons/math/exception/util/LocalizedFormats\$*.class,org/apache/commons/math/fraction/BigFraction.class,org/apache/commons/math/fraction/BigFraction\$*.class,org/apache/commons/math/fraction/FractionConversionException.class,org/apache/commons/math/fraction/FractionConversionException\$*.class,org/apache/commons/math/random/RandomData.class,org/apache/commons/math/random/RandomData\$*.class,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.class,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic\$*.class,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.class,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic\$*.class,org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic.class,org/apache/commons/math/stat/descriptive/StorelessUnivariateStatistic\$*.class,org/apache/commons/math/stat/descriptive/UnivariateStatistic.class,org/apache/commons/math/stat/descriptive/UnivariateStatistic\$*.class,org/apache/commons/math/stat/descriptive/WeightedEvaluation.class,org/apache/commons/math/stat/descriptive/WeightedEvaluation\$*.class,org/apache/commons/math/stat/descriptive/moment/FirstMoment.class,org/apache/commons/math/stat/descriptive/moment/FirstMoment\$*.class,org/apache/commons/math/stat/descriptive/moment/Mean.class,org/apache/commons/math/stat/descriptive/moment/Mean\$*.class,org/apache/commons/math/stat/descriptive/moment/SecondMoment.class,org/apache/commons/math/stat/descriptive/moment/SecondMoment\$*.class,org/apache/commons/math/stat/descriptive/moment/Variance.class,org/apache/commons/math/stat/descriptive/moment/Variance\$*.class,org/apache/commons/math/stat/descriptive/summary/Sum.class,org/apache/commons/math/stat/descriptive/summary/Sum\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class
 d4j.classes.modified=org.apache.commons.math.stat.descriptive.moment.Variance
 d4j.classes.relevant=org.apache.commons.math.exception.DimensionMismatchException,org.apache.commons.math.exception.MathIllegalArgumentException,org.apache.commons.math.exception.MathIllegalNumberException,org.apache.commons.math.exception.NotPositiveException,org.apache.commons.math.exception.NullArgumentException,org.apache.commons.math.exception.NumberIsTooLargeException,org.apache.commons.math.exception.NumberIsTooSmallException,org.apache.commons.math.exception.util.ExceptionContextProvider,org.apache.commons.math.exception.util.Localizable,org.apache.commons.math.random.RandomData,org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic,org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic,org.apache.commons.math.stat.descriptive.moment.FirstMoment,org.apache.commons.math.stat.descriptive.moment.Mean,org.apache.commons.math.stat.descriptive.moment.SecondMoment,org.apache.commons.math.stat.descriptive.moment.Variance,org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic,org.apache.commons.math.stat.descriptive.summary.Sum,org.apache.commons.math.stat.descriptive.UnivariateStatistic,org.apache.commons.math.stat.descriptive.WeightedEvaluation,org.apache.commons.math.util.FastMath
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
index 42051ca..75f392f 100644
--- a/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
+++ b/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java
@@ -596,5 +596,25 @@ public class BigFractionTest {
             Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));
         }
     }
+    @Test
+    public void testFloatValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.floatValue(), 1e-15);
+    }
+    @Test
+    public void testDoubleValueForLargeNumeratorAndDenominator() {
+        final BigInteger pow400 = BigInteger.TEN.pow(400);
+        final BigInteger pow401 = BigInteger.TEN.pow(401);
+        final BigInteger two = new BigInteger("2");
+        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
+                                                  pow400.multiply(two));
+
+        Assert.assertEquals(5, large.doubleValue(), 1e-15);
+    }
 
 }
