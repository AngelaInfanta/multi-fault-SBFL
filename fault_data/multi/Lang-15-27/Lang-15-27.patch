diff --git a/defects4j.build.properties b/defects4j.build.properties
index 870c354..a05a1b3 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=27
+d4j.classes.instrument=org/apache/commons/lang3/ArrayUtils.class,org/apache/commons/lang3/ArrayUtils\$*.class,org/apache/commons/lang3/ClassUtils.class,org/apache/commons/lang3/ClassUtils\$*.class,org/apache/commons/lang3/JavaVersion.class,org/apache/commons/lang3/JavaVersion\$*.class,org/apache/commons/lang3/StringEscapeUtils.class,org/apache/commons/lang3/StringEscapeUtils\$*.class,org/apache/commons/lang3/StringUtils.class,org/apache/commons/lang3/StringUtils\$*.class,org/apache/commons/lang3/SystemUtils.class,org/apache/commons/lang3/SystemUtils\$*.class,org/apache/commons/lang3/math/NumberUtils.class,org/apache/commons/lang3/math/NumberUtils\$*.class,org/apache/commons/lang3/reflect/TypeUtils.class,org/apache/commons/lang3/reflect/TypeUtils\$*.class,org/apache/commons/lang3/text/translate/AggregateTranslator.class,org/apache/commons/lang3/text/translate/AggregateTranslator\$*.class,org/apache/commons/lang3/text/translate/CharSequenceTranslator.class,org/apache/commons/lang3/text/translate/CharSequenceTranslator\$*.class,org/apache/commons/lang3/text/translate/CodePointTranslator.class,org/apache/commons/lang3/text/translate/CodePointTranslator\$*.class,org/apache/commons/lang3/text/translate/EntityArrays.class,org/apache/commons/lang3/text/translate/EntityArrays\$*.class,org/apache/commons/lang3/text/translate/LookupTranslator.class,org/apache/commons/lang3/text/translate/LookupTranslator\$*.class,org/apache/commons/lang3/text/translate/NumericEntityUnescaper.class,org/apache/commons/lang3/text/translate/NumericEntityUnescaper\$*.class,org/apache/commons/lang3/text/translate/OctalUnescaper.class,org/apache/commons/lang3/text/translate/OctalUnescaper\$*.class,org/apache/commons/lang3/text/translate/UnicodeEscaper.class,org/apache/commons/lang3/text/translate/UnicodeEscaper\$*.class,org/apache/commons/lang3/text/translate/UnicodeUnescaper.class,org/apache/commons/lang3/text/translate/UnicodeUnescaper\$*.class
 d4j.classes.modified=org.apache.commons.lang3.math.NumberUtils
 d4j.classes.relevant=org.apache.commons.lang3.math.NumberUtils,org.apache.commons.lang3.StringUtils,org.apache.commons.lang3.SystemUtils
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
index 342defc..f8d293b 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -107,6 +107,7 @@ public class TypeUtilsTest<B> {
             List<? super String>[] list13) {
     }
 
+    @SuppressWarnings("boxing") // deliberately used here
     @Test
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
@@ -129,7 +130,7 @@ public class TypeUtilsTest<B> {
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
-        list0 = list0;
+//        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
@@ -155,7 +156,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
-        list1 = list1;
+//        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
@@ -177,7 +178,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
-        list2 = list2;
+//        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
@@ -193,7 +194,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
-        list3 = list3;
+//        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
@@ -209,7 +210,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
-        list4 = list4;
+//        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
@@ -219,16 +220,16 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
-        list5 = list5;
+//        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
-        list6 = list6;
+//        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
-        list7 = list7;
+//        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
@@ -254,7 +255,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
-        list8 = list8;
+//        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
@@ -262,7 +263,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
-        list8 = (List<Object>[]) list10;
+        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
@@ -276,7 +277,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
-        list9 = list9;
+//        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
@@ -294,7 +295,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
-        list10 = list10;
+//        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
@@ -308,7 +309,7 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
-        list11 = list11;
+//        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
@@ -318,13 +319,13 @@ public class TypeUtilsTest<B> {
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
-        list12 = list12;
+//        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
-        list13 = list13;
+//        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
@@ -344,7 +345,8 @@ public class TypeUtilsTest<B> {
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
-        Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
+        Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
+                TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
@@ -375,15 +377,15 @@ public class TypeUtilsTest<B> {
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
-        // du = bo;
+        lo = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
-        lo = new Integer(0);
+        lo = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
-        // lngW = new Integer( 0 );
+        // lngW = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
-        in = new Integer(0);
+        in = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
@@ -398,7 +400,7 @@ public class TypeUtilsTest<B> {
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
-        // longComparable = new Integer( 0 );
+        // longComparable = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
@@ -501,6 +503,11 @@ public class TypeUtilsTest<B> {
         Assert.assertTrue(typeVarAssigns.size() == 2);
         Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
         Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));
+
+        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
+        Assert.assertEquals(2, typeVarAssigns.size());
+        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
+        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
     }
 
     @Test
