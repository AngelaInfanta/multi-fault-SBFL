--- Overwrite: testGcd
292a293,319
> 
>         assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));
> 
>         assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));
>         assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));
>         assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));
>         try {
>             // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
>             MathUtils.gcd(Integer.MIN_VALUE, 0);
>             fail("expecting ArithmeticException");
>         } catch (ArithmeticException expected) {
>             // expected
>         }
>         try {
>             // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
>             MathUtils.gcd(0, Integer.MIN_VALUE);
>             fail("expecting ArithmeticException");
>         } catch (ArithmeticException expected) {
>             // expected
>         }
>         try {
>             // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
>             MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
>             fail("expecting ArithmeticException");
>         } catch (ArithmeticException expected) {
>             // expected
>         }
--- Overwrite: testLcm
411a412
>         assertEquals(150, MathUtils.lcm(-a, -b));
412a414,436
> 
>         // Assert that no intermediate value overflows:
>         // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
>         assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));
> 
>         // Special case
>         assertEquals(0, MathUtils.lcm(0, 0));
> 
>         try {
>             // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
>             MathUtils.lcm(Integer.MIN_VALUE, 1);
>             fail("Expecting ArithmeticException");
>         } catch (ArithmeticException ex) {
>             // expected
>         }
>         
>         try {
>             // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
>             MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
>             fail("Expecting ArithmeticException");
>         } catch (ArithmeticException ex) {
>             // expected
>         }
