diff --git a/defects4j.build.properties b/defects4j.build.properties
index 766a0ed..c960bcf 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=100
+d4j.classes.instrument=org/apache/commons/math/MathException.class,org/apache/commons/math/MathException\$*.class,org/apache/commons/math/MathRuntimeException.class,org/apache/commons/math/MathRuntimeException\$*.class,org/apache/commons/math/estimation/AbstractEstimator.class,org/apache/commons/math/estimation/AbstractEstimator\$*.class,org/apache/commons/math/estimation/EstimatedParameter.class,org/apache/commons/math/estimation/EstimatedParameter\$*.class,org/apache/commons/math/estimation/EstimationException.class,org/apache/commons/math/estimation/EstimationException\$*.class,org/apache/commons/math/estimation/EstimationProblem.class,org/apache/commons/math/estimation/EstimationProblem\$*.class,org/apache/commons/math/estimation/Estimator.class,org/apache/commons/math/estimation/Estimator\$*.class,org/apache/commons/math/estimation/GaussNewtonEstimator.class,org/apache/commons/math/estimation/GaussNewtonEstimator\$*.class,org/apache/commons/math/estimation/SimpleEstimationProblem.class,org/apache/commons/math/estimation/SimpleEstimationProblem\$*.class,org/apache/commons/math/estimation/WeightedMeasurement.class,org/apache/commons/math/estimation/WeightedMeasurement\$*.class,org/apache/commons/math/linear/BigMatrix.class,org/apache/commons/math/linear/BigMatrix\$*.class,org/apache/commons/math/linear/InvalidMatrixException.class,org/apache/commons/math/linear/InvalidMatrixException\$*.class,org/apache/commons/math/linear/MatrixIndexException.class,org/apache/commons/math/linear/MatrixIndexException\$*.class,org/apache/commons/math/linear/MatrixUtils.class,org/apache/commons/math/linear/MatrixUtils\$*.class,org/apache/commons/math/linear/RealMatrix.class,org/apache/commons/math/linear/RealMatrix\$*.class,org/apache/commons/math/linear/RealMatrixImpl.class,org/apache/commons/math/linear/RealMatrixImpl\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class
 d4j.classes.modified=org.apache.commons.math.estimation.AbstractEstimator
 d4j.classes.relevant=org.apache.commons.math.estimation.AbstractEstimator,org.apache.commons.math.estimation.EstimatedParameter,org.apache.commons.math.estimation.EstimationException,org.apache.commons.math.estimation.EstimationProblem,org.apache.commons.math.estimation.Estimator,org.apache.commons.math.estimation.GaussNewtonEstimator,org.apache.commons.math.estimation.SimpleEstimationProblem,org.apache.commons.math.estimation.WeightedMeasurement,org.apache.commons.math.linear.BigMatrix,org.apache.commons.math.linear.InvalidMatrixException,org.apache.commons.math.linear.MatrixIndexException,org.apache.commons.math.linear.MatrixUtils,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrixImpl,org.apache.commons.math.MathException
 d4j.dir.src.classes=src/java
diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
index cb39517..e00a7d1 100644
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -290,6 +290,33 @@ public final class MathUtilsTest extends TestCase {
         assertEquals(1, MathUtils.gcd(-a, c));
         assertEquals(1, MathUtils.gcd(a, -c));
         assertEquals(1, MathUtils.gcd(-a, -c));
+
+        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));
+
+        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));
+        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));
+        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));
+        try {
+            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
+            MathUtils.gcd(Integer.MIN_VALUE, 0);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException expected) {
+            // expected
+        }
+        try {
+            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
+            MathUtils.gcd(0, Integer.MIN_VALUE);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException expected) {
+            // expected
+        }
+        try {
+            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
+            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException expected) {
+            // expected
+        }
     }
 
     public void testHash() {
@@ -382,8 +409,32 @@ public final class MathUtilsTest extends TestCase {
         assertEquals(150, MathUtils.lcm(a, b));
         assertEquals(150, MathUtils.lcm(-a, b));
         assertEquals(150, MathUtils.lcm(a, -b));
+        assertEquals(150, MathUtils.lcm(-a, -b));
         assertEquals(2310, MathUtils.lcm(a, c));
 
+        // Assert that no intermediate value overflows:
+        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
+        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));
+
+        // Special case
+        assertEquals(0, MathUtils.lcm(0, 0));
+
+        try {
+            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
+            MathUtils.lcm(Integer.MIN_VALUE, 1);
+            fail("Expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+        
+        try {
+            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
+            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
+            fail("Expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+
         try {
             MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
             fail("Expecting ArithmeticException");
