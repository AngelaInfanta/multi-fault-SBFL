diff --git a/defects4j.build.properties b/defects4j.build.properties
index cc3a568..95c4b65 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=85
+d4j.classes.instrument=org/apache/commons/math/ConvergenceException.class,org/apache/commons/math/ConvergenceException\$*.class,org/apache/commons/math/ConvergingAlgorithm.class,org/apache/commons/math/ConvergingAlgorithm\$*.class,org/apache/commons/math/ConvergingAlgorithmImpl.class,org/apache/commons/math/ConvergingAlgorithmImpl\$*.class,org/apache/commons/math/FunctionEvaluationException.class,org/apache/commons/math/FunctionEvaluationException\$*.class,org/apache/commons/math/MathException.class,org/apache/commons/math/MathException\$*.class,org/apache/commons/math/MaxIterationsExceededException.class,org/apache/commons/math/MaxIterationsExceededException\$*.class,org/apache/commons/math/analysis/UnivariateRealFunction.class,org/apache/commons/math/analysis/UnivariateRealFunction\$*.class,org/apache/commons/math/analysis/solvers/BrentSolver.class,org/apache/commons/math/analysis/solvers/BrentSolver\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactoryImpl\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils\$*.class,org/apache/commons/math/distribution/AbstractContinuousDistribution.class,org/apache/commons/math/distribution/AbstractContinuousDistribution\$*.class,org/apache/commons/math/distribution/AbstractDistribution.class,org/apache/commons/math/distribution/AbstractDistribution\$*.class,org/apache/commons/math/distribution/ContinuousDistribution.class,org/apache/commons/math/distribution/ContinuousDistribution\$*.class,org/apache/commons/math/distribution/Distribution.class,org/apache/commons/math/distribution/Distribution\$*.class,org/apache/commons/math/distribution/HasDensity.class,org/apache/commons/math/distribution/HasDensity\$*.class,org/apache/commons/math/distribution/NormalDistribution.class,org/apache/commons/math/distribution/NormalDistribution\$*.class,org/apache/commons/math/distribution/NormalDistributionImpl.class,org/apache/commons/math/distribution/NormalDistributionImpl\$*.class,org/apache/commons/math/special/Erf.class,org/apache/commons/math/special/Erf\$*.class,org/apache/commons/math/special/Gamma.class,org/apache/commons/math/special/Gamma\$*.class,org/apache/commons/math/stat/clustering/Cluster.class,org/apache/commons/math/stat/clustering/Cluster\$*.class,org/apache/commons/math/stat/clustering/Clusterable.class,org/apache/commons/math/stat/clustering/Clusterable\$*.class,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint.class,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint\$*.class,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.class,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer\$*.class,org/apache/commons/math/util/ContinuedFraction.class,org/apache/commons/math/util/ContinuedFraction\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class
 d4j.classes.modified=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
 d4j.classes.relevant=org.apache.commons.math.analysis.solvers.BrentSolver,org.apache.commons.math.analysis.solvers.UnivariateRealSolver,org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactory,org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImpl,org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.ConvergenceException,org.apache.commons.math.ConvergingAlgorithm,org.apache.commons.math.ConvergingAlgorithmImpl,org.apache.commons.math.distribution.AbstractContinuousDistribution,org.apache.commons.math.distribution.AbstractDistribution,org.apache.commons.math.distribution.ContinuousDistribution,org.apache.commons.math.distribution.Distribution,org.apache.commons.math.distribution.HasDensity,org.apache.commons.math.distribution.NormalDistribution,org.apache.commons.math.distribution.NormalDistributionImpl,org.apache.commons.math.FunctionEvaluationException,org.apache.commons.math.MathException,org.apache.commons.math.MaxIterationsExceededException,org.apache.commons.math.special.Erf,org.apache.commons.math.special.Gamma,org.apache.commons.math.util.ContinuedFraction
 d4j.dir.src.classes=src/java
diff --git a/src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java b/src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
index da1d8a9..73a1875 100644
--- a/src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
+++ b/src/test/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
@@ -93,5 +93,21 @@ public class KMeansPlusPlusClustererTest {
         assertTrue(cluster3Found);
 
     }
+    @Test
+    public void testPerformClusterAnalysisDegenerate() {
+        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
+                new Random(1746432956321l));
+        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
+                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),
+                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };
+        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);
+        assertEquals(1, clusters.size());
+        assertEquals(2, (clusters.get(0).getPoints().size()));
+        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });
+        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });
+        assertTrue(clusters.get(0).getPoints().contains(pt1));
+        assertTrue(clusters.get(0).getPoints().contains(pt2));
+
+    } 
 
 }
