--- Insert: testIssue537a
9147a9148,9169
>   public void testIssue537a() throws Exception {
>     testTypes(
>         "/** @constructor */ function Foo() {}" +
>         "Foo.prototype = {method: function() {}};" +
>         "/**\n" +
>         " * @constructor\n" +
>         " * @extends {Foo}\n" +
>         " */\n" +
>         "function Bar() {" +
>         "  Foo.call(this);" +
>         "  if (this.baz()) this.method(1);" +
>         "}" +
>         "Bar.prototype = {" +
>         "  baz: function() {" +
>         "    return true;" +
>         "  }" +
>         "};" +
>         "Bar.prototype.__proto__ = Foo.prototype;",
>         "Function Foo.prototype.method: called with 1 argument(s). " +
>         "Function requires at least 0 argument(s) " +
>         "and no more than 0 argument(s).");
>   }
--- Insert: testIssue537b
9169a9170,9191
>   public void testIssue537b() throws Exception {
>     testTypes(
>         "/** @constructor */ function Foo() {}" +
>         "Foo.prototype = {method: function() {}};" +
>         "/**\n" +
>         " * @constructor\n" +
>         " * @extends {Foo}\n" +
>         " */\n" +
>         "function Bar() {" +
>         "  Foo.call(this);" +
>         "  if (this.baz(1)) this.method();" +
>         "}" +
>         "Bar.prototype = {" +
>         "  baz: function() {" +
>         "    return true;" +
>         "  }" +
>         "};" +
>         "Bar.prototype.__proto__ = Foo.prototype;",
>         "Function Bar.prototype.baz: called with 1 argument(s). " +
>         "Function requires at least 0 argument(s) " +
>         "and no more than 0 argument(s).");
>   }
--- Overwrite: testPropertyOnUnknownSuperClass2
375,377c375,377
<     // Should be true
<     assertFalse(x.getImplicitPrototype().hasOwnProperty("bar"));
<     assertEquals("number", x.getPropertyType("bar").toString());
---
>     assertEquals("Foo.prototype", x.getImplicitPrototype().toString());
>     assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));
>     assertEquals("?", x.getPropertyType("bar").toString());
