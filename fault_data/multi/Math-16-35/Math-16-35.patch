diff --git a/defects4j.build.properties b/defects4j.build.properties
index 9397f37..3fda0e5 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=35
+d4j.classes.instrument=org/apache/commons/math3/Field.class,org/apache/commons/math3/Field\$*.class,org/apache/commons/math3/FieldElement.class,org/apache/commons/math3/FieldElement\$*.class,org/apache/commons/math3/dfp/Dfp.class,org/apache/commons/math3/dfp/Dfp\$*.class,org/apache/commons/math3/dfp/DfpField.class,org/apache/commons/math3/dfp/DfpField\$*.class,org/apache/commons/math3/exception/MathIllegalArgumentException.class,org/apache/commons/math3/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math3/exception/MathIllegalNumberException.class,org/apache/commons/math3/exception/MathIllegalNumberException\$*.class,org/apache/commons/math3/exception/NotPositiveException.class,org/apache/commons/math3/exception/NotPositiveException\$*.class,org/apache/commons/math3/exception/NotStrictlyPositiveException.class,org/apache/commons/math3/exception/NotStrictlyPositiveException\$*.class,org/apache/commons/math3/exception/NumberIsTooLargeException.class,org/apache/commons/math3/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math3/exception/NumberIsTooSmallException.class,org/apache/commons/math3/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math3/exception/OutOfRangeException.class,org/apache/commons/math3/exception/OutOfRangeException\$*.class,org/apache/commons/math3/exception/util/ArgUtils.class,org/apache/commons/math3/exception/util/ArgUtils\$*.class,org/apache/commons/math3/exception/util/ExceptionContext.class,org/apache/commons/math3/exception/util/ExceptionContext\$*.class,org/apache/commons/math3/exception/util/ExceptionContextProvider.class,org/apache/commons/math3/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math3/exception/util/Localizable.class,org/apache/commons/math3/exception/util/Localizable\$*.class,org/apache/commons/math3/exception/util/LocalizedFormats.class,org/apache/commons/math3/exception/util/LocalizedFormats\$*.class,org/apache/commons/math3/genetics/Chromosome.class,org/apache/commons/math3/genetics/Chromosome\$*.class,org/apache/commons/math3/genetics/ElitisticListPopulation.class,org/apache/commons/math3/genetics/ElitisticListPopulation\$*.class,org/apache/commons/math3/genetics/Fitness.class,org/apache/commons/math3/genetics/Fitness\$*.class,org/apache/commons/math3/genetics/ListPopulation.class,org/apache/commons/math3/genetics/ListPopulation\$*.class,org/apache/commons/math3/genetics/Population.class,org/apache/commons/math3/genetics/Population\$*.class,org/apache/commons/math3/random/BitsStreamGenerator.class,org/apache/commons/math3/random/BitsStreamGenerator\$*.class,org/apache/commons/math3/random/MersenneTwister.class,org/apache/commons/math3/random/MersenneTwister\$*.class,org/apache/commons/math3/random/RandomGenerator.class,org/apache/commons/math3/random/RandomGenerator\$*.class,org/apache/commons/math3/util/FastMath.class,org/apache/commons/math3/util/FastMath\$*.class,org/apache/commons/math3/util/FastMathLiteralArrays.class,org/apache/commons/math3/util/FastMathLiteralArrays\$*.class
 d4j.classes.modified=org.apache.commons.math3.genetics.ElitisticListPopulation
 d4j.classes.relevant=org.apache.commons.math3.exception.MathIllegalArgumentException,org.apache.commons.math3.exception.MathIllegalNumberException,org.apache.commons.math3.exception.NotPositiveException,org.apache.commons.math3.exception.NumberIsTooLargeException,org.apache.commons.math3.exception.NumberIsTooSmallException,org.apache.commons.math3.exception.OutOfRangeException,org.apache.commons.math3.exception.util.ArgUtils,org.apache.commons.math3.exception.util.ExceptionContext,org.apache.commons.math3.exception.util.ExceptionContextProvider,org.apache.commons.math3.exception.util.Localizable,org.apache.commons.math3.exception.util.LocalizedFormats,org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.ElitisticListPopulation,org.apache.commons.math3.genetics.Fitness,org.apache.commons.math3.genetics.ListPopulation,org.apache.commons.math3.genetics.Population
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math3/util/FastMathTest.java b/src/test/java/org/apache/commons/math3/util/FastMathTest.java
index 9a15584..09be29b 100644
--- a/src/test/java/org/apache/commons/math3/util/FastMathTest.java
+++ b/src/test/java/org/apache/commons/math3/util/FastMathTest.java
@@ -1108,4 +1108,46 @@ public class FastMathTest {
         Assert.assertEquals(1.0F, FastMath.copySign(1d, 0.0F), delta);
         Assert.assertEquals(-1.0F, FastMath.copySign(1d, -2.0F), delta);
     }
+    @Test
+    public void testMath905LargePositive() {
+        final double start = StrictMath.log(Double.MAX_VALUE);
+        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
+        final double end = 2 * StrictMath.log(endT);
+
+        double maxErr = 0;
+        for (double x = start; x < end; x += 1e-3) {
+            final double tst = FastMath.cosh(x);
+            final double ref = Math.cosh(x);
+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
+        }
+        Assert.assertEquals(0, maxErr, 3);
+
+        for (double x = start; x < end; x += 1e-3) {
+            final double tst = FastMath.sinh(x);
+            final double ref = Math.sinh(x);
+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
+        }
+        Assert.assertEquals(0, maxErr, 3);
+    }
+    @Test
+    public void testMath905LargeNegative() {
+        final double start = -StrictMath.log(Double.MAX_VALUE);
+        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
+        final double end = -2 * StrictMath.log(endT);
+
+        double maxErr = 0;
+        for (double x = start; x > end; x -= 1e-3) {
+            final double tst = FastMath.cosh(x);
+            final double ref = Math.cosh(x);
+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
+        }
+        Assert.assertEquals(0, maxErr, 3);
+
+        for (double x = start; x > end; x -= 1e-3) {
+            final double tst = FastMath.sinh(x);
+            final double ref = Math.sinh(x);
+            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
+        }
+        Assert.assertEquals(0, maxErr, 3);
+    }
 }
