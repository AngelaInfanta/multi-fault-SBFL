--- Overwrite: testInlineAcrossSideEffect1
318c318,323
<     inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
---
>     // This can't be inlined because print() has side-effects and might change
>     // the definition of noSFX.
>     //
>     // noSFX must be both const and pure in order to inline it.
>     noInline("var y; var x = noSFX(y); print(x)");
>     //inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
--- Overwrite: testCanInlineAcrossNoSideEffect
353,354c353,360
<     inline("var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)",
<            "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))");
---
>     // This can't be inlined because print() has side-effects and might change
>     // the definition of noSFX. We should be able to mark noSFX as const
>     // in some way.
>     noInline(
>         "var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)");
>     //inline(
>     //    "var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)",
>     //    "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(y))");
--- Insert: testIssue698
419a420,437
>   public void testIssue698() {
>     // Most of the flow algorithms operate on Vars. We want to make
>     // sure the algorithm bails out appropriately if it sees
>     // a var that it doesn't know about.
>     inline(
>         "var x = ''; "
>         + "unknown.length < 2 && (unknown='0' + unknown);"
>         + "x = x + unknown; "
>         + "unknown.length < 3 && (unknown='0' + unknown);"
>         + "x = x + unknown; "
>         + "return x;",
>         "var x; "
>         + "unknown.length < 2 && (unknown='0' + unknown);"
>         + "x = '' + unknown; "
>         + "unknown.length < 3 && (unknown='0' + unknown);"
>         + "x = x + unknown; "
>         + "return x;");
>   }
