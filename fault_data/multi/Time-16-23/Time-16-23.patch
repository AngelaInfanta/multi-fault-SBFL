diff --git a/defects4j.build.properties b/defects4j.build.properties
index adfd5a4..5f80e6b 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=23
+d4j.classes.instrument=org/joda/time/Chronology.class,org/joda/time/Chronology\$*.class,org/joda/time/DateTime.class,org/joda/time/DateTime\$*.class,org/joda/time/DateTimeField.class,org/joda/time/DateTimeField\$*.class,org/joda/time/DateTimeFieldType.class,org/joda/time/DateTimeFieldType\$*.class,org/joda/time/DateTimeUtils.class,org/joda/time/DateTimeUtils\$*.class,org/joda/time/DateTimeZone.class,org/joda/time/DateTimeZone\$*.class,org/joda/time/DurationField.class,org/joda/time/DurationField\$*.class,org/joda/time/DurationFieldType.class,org/joda/time/DurationFieldType\$*.class,org/joda/time/IllegalFieldValueException.class,org/joda/time/IllegalFieldValueException\$*.class,org/joda/time/Instant.class,org/joda/time/Instant\$*.class,org/joda/time/JodaTimePermission.class,org/joda/time/JodaTimePermission\$*.class,org/joda/time/MutableDateTime.class,org/joda/time/MutableDateTime\$*.class,org/joda/time/ReadWritableDateTime.class,org/joda/time/ReadWritableDateTime\$*.class,org/joda/time/ReadWritableInstant.class,org/joda/time/ReadWritableInstant\$*.class,org/joda/time/ReadableDateTime.class,org/joda/time/ReadableDateTime\$*.class,org/joda/time/ReadableInstant.class,org/joda/time/ReadableInstant\$*.class,org/joda/time/ReadableInterval.class,org/joda/time/ReadableInterval\$*.class,org/joda/time/ReadablePartial.class,org/joda/time/ReadablePartial\$*.class,org/joda/time/base/AbstractDateTime.class,org/joda/time/base/AbstractDateTime\$*.class,org/joda/time/base/AbstractInstant.class,org/joda/time/base/AbstractInstant\$*.class,org/joda/time/base/BaseDateTime.class,org/joda/time/base/BaseDateTime\$*.class,org/joda/time/chrono/AssembledChronology.class,org/joda/time/chrono/AssembledChronology\$*.class,org/joda/time/chrono/BaseChronology.class,org/joda/time/chrono/BaseChronology\$*.class,org/joda/time/chrono/BasicChronology.class,org/joda/time/chrono/BasicChronology\$*.class,org/joda/time/chrono/BasicDayOfMonthDateTimeField.class,org/joda/time/chrono/BasicDayOfMonthDateTimeField\$*.class,org/joda/time/chrono/BasicDayOfYearDateTimeField.class,org/joda/time/chrono/BasicDayOfYearDateTimeField\$*.class,org/joda/time/chrono/BasicGJChronology.class,org/joda/time/chrono/BasicGJChronology\$*.class,org/joda/time/chrono/BasicMonthOfYearDateTimeField.class,org/joda/time/chrono/BasicMonthOfYearDateTimeField\$*.class,org/joda/time/chrono/BasicSingleEraDateTimeField.class,org/joda/time/chrono/BasicSingleEraDateTimeField\$*.class,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.class,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField\$*.class,org/joda/time/chrono/BasicWeekyearDateTimeField.class,org/joda/time/chrono/BasicWeekyearDateTimeField\$*.class,org/joda/time/chrono/BasicYearDateTimeField.class,org/joda/time/chrono/BasicYearDateTimeField\$*.class,org/joda/time/chrono/BuddhistChronology.class,org/joda/time/chrono/BuddhistChronology\$*.class,org/joda/time/chrono/GJChronology.class,org/joda/time/chrono/GJChronology\$*.class,org/joda/time/chrono/GJDayOfWeekDateTimeField.class,org/joda/time/chrono/GJDayOfWeekDateTimeField\$*.class,org/joda/time/chrono/GJEraDateTimeField.class,org/joda/time/chrono/GJEraDateTimeField\$*.class,org/joda/time/chrono/GJMonthOfYearDateTimeField.class,org/joda/time/chrono/GJMonthOfYearDateTimeField\$*.class,org/joda/time/chrono/GJYearOfEraDateTimeField.class,org/joda/time/chrono/GJYearOfEraDateTimeField\$*.class,org/joda/time/chrono/GregorianChronology.class,org/joda/time/chrono/GregorianChronology\$*.class,org/joda/time/chrono/ISOChronology.class,org/joda/time/chrono/ISOChronology\$*.class,org/joda/time/chrono/ISOYearOfEraDateTimeField.class,org/joda/time/chrono/ISOYearOfEraDateTimeField\$*.class,org/joda/time/chrono/JulianChronology.class,org/joda/time/chrono/JulianChronology\$*.class,org/joda/time/chrono/LimitChronology.class,org/joda/time/chrono/LimitChronology\$*.class,org/joda/time/chrono/ZonedChronology.class,org/joda/time/chrono/ZonedChronology\$*.class,org/joda/time/field/BaseDateTimeField.class,org/joda/time/field/BaseDateTimeField\$*.class,org/joda/time/field/BaseDurationField.class,org/joda/time/field/BaseDurationField\$*.class,org/joda/time/field/DecoratedDateTimeField.class,org/joda/time/field/DecoratedDateTimeField\$*.class,org/joda/time/field/DecoratedDurationField.class,org/joda/time/field/DecoratedDurationField\$*.class,org/joda/time/field/DelegatedDateTimeField.class,org/joda/time/field/DelegatedDateTimeField\$*.class,org/joda/time/field/DividedDateTimeField.class,org/joda/time/field/DividedDateTimeField\$*.class,org/joda/time/field/FieldUtils.class,org/joda/time/field/FieldUtils\$*.class,org/joda/time/field/ImpreciseDateTimeField.class,org/joda/time/field/ImpreciseDateTimeField\$*.class,org/joda/time/field/MillisDurationField.class,org/joda/time/field/MillisDurationField\$*.class,org/joda/time/field/OffsetDateTimeField.class,org/joda/time/field/OffsetDateTimeField\$*.class,org/joda/time/field/PreciseDateTimeField.class,org/joda/time/field/PreciseDateTimeField\$*.class,org/joda/time/field/PreciseDurationDateTimeField.class,org/joda/time/field/PreciseDurationDateTimeField\$*.class,org/joda/time/field/PreciseDurationField.class,org/joda/time/field/PreciseDurationField\$*.class,org/joda/time/field/RemainderDateTimeField.class,org/joda/time/field/RemainderDateTimeField\$*.class,org/joda/time/field/ScaledDurationField.class,org/joda/time/field/ScaledDurationField\$*.class,org/joda/time/field/SkipDateTimeField.class,org/joda/time/field/SkipDateTimeField\$*.class,org/joda/time/field/SkipUndoDateTimeField.class,org/joda/time/field/SkipUndoDateTimeField\$*.class,org/joda/time/field/UnsupportedDateTimeField.class,org/joda/time/field/UnsupportedDateTimeField\$*.class,org/joda/time/field/UnsupportedDurationField.class,org/joda/time/field/UnsupportedDurationField\$*.class,org/joda/time/field/ZeroIsMaxDateTimeField.class,org/joda/time/field/ZeroIsMaxDateTimeField\$*.class,org/joda/time/format/DateTimeFormat.class,org/joda/time/format/DateTimeFormat\$*.class,org/joda/time/format/DateTimeFormatter.class,org/joda/time/format/DateTimeFormatter\$*.class,org/joda/time/format/DateTimeFormatterBuilder.class,org/joda/time/format/DateTimeFormatterBuilder\$*.class,org/joda/time/format/DateTimeParser.class,org/joda/time/format/DateTimeParser\$*.class,org/joda/time/format/DateTimeParserBucket.class,org/joda/time/format/DateTimeParserBucket\$*.class,org/joda/time/format/DateTimePrinter.class,org/joda/time/format/DateTimePrinter\$*.class,org/joda/time/format/ISODateTimeFormat.class,org/joda/time/format/ISODateTimeFormat\$*.class,org/joda/time/tz/CachedDateTimeZone.class,org/joda/time/tz/CachedDateTimeZone\$*.class,org/joda/time/tz/DateTimeZoneBuilder.class,org/joda/time/tz/DateTimeZoneBuilder\$*.class,org/joda/time/tz/DefaultNameProvider.class,org/joda/time/tz/DefaultNameProvider\$*.class,org/joda/time/tz/FixedDateTimeZone.class,org/joda/time/tz/FixedDateTimeZone\$*.class,org/joda/time/tz/NameProvider.class,org/joda/time/tz/NameProvider\$*.class,org/joda/time/tz/Provider.class,org/joda/time/tz/Provider\$*.class,org/joda/time/tz/ZoneInfoProvider.class,org/joda/time/tz/ZoneInfoProvider\$*.class
 d4j.classes.modified=org.joda.time.DateTimeZone
 d4j.classes.relevant=org.joda.time.chrono.AssembledChronology,org.joda.time.chrono.BaseChronology,org.joda.time.chrono.ISOChronology,org.joda.time.Chronology,org.joda.time.DateTimeZone,org.joda.time.JodaTimePermission,org.joda.time.ReadableInstant,org.joda.time.tz.CachedDateTimeZone,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.tz.DefaultNameProvider,org.joda.time.tz.FixedDateTimeZone,org.joda.time.tz.NameProvider,org.joda.time.tz.Provider,org.joda.time.tz.ZoneInfoProvider
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
index dfe4d7f..4d4377a 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
@@ -892,6 +892,48 @@ public class TestDateTimeFormatter extends TestCase {
 
     // Ensure time zone name switches properly at the zone DST transition.
     public void testZoneShortNameNearTransition() {}
+    public void testParseInto_monthOnly_baseStartYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO);
+        assertEquals(1, f.parseInto(result, "5", 0));
+        assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);
+    }
+    public void testParseInto_monthOnly_parseStartYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 2, 1, 12, 20, 30, 0, TOKYO);
+        assertEquals(1, f.parseInto(result, "1", 0));
+        assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result);
+    }
+    public void testParseInto_monthOnly_baseEndYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO);
+        assertEquals(1, f.parseInto(result, "5", 0));
+        assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result);
+   }
+    public void testParseInto_monthOnly() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
+        assertEquals(1, f.parseInto(result, "5", 0));
+        assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);
+    }
+    public void testParseInto_monthDay_withDefaultYear_feb29() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
+    }
+    public void testParseInto_monthDay_feb29() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
+        assertEquals(4, f.parseInto(result, "2 29", 0));
+        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
+    }
+    public void testParseInto_monthOnly_parseEndYear() {
+        DateTimeFormatter f = DateTimeFormat.forPattern("M").withLocale(Locale.UK);
+        MutableDateTime result = new MutableDateTime(2004, 1, 31, 12, 20, 30, 0,TOKYO);
+        assertEquals(2, f.parseInto(result, "12", 0));
+        assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result);
+    }
 // Defects4J: flaky method
 //     public void testZoneShortNameNearTransition() {
 //         DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);
