diff --git a/defects4j.build.properties b/defects4j.build.properties
index 076e5ae..760c855 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=24
+d4j.classes.instrument=org/apache/commons/math3/analysis/DifferentiableUnivariateFunction.class,org/apache/commons/math3/analysis/DifferentiableUnivariateFunction\$*.class,org/apache/commons/math3/analysis/FunctionUtils.class,org/apache/commons/math3/analysis/FunctionUtils\$*.class,org/apache/commons/math3/analysis/MultivariateFunction.class,org/apache/commons/math3/analysis/MultivariateFunction\$*.class,org/apache/commons/math3/analysis/UnivariateFunction.class,org/apache/commons/math3/analysis/UnivariateFunction\$*.class,org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable.class,org/apache/commons/math3/analysis/differentiation/UnivariateDifferentiable\$*.class,org/apache/commons/math3/analysis/function/Sin.class,org/apache/commons/math3/analysis/function/Sin\$*.class,org/apache/commons/math3/analysis/function/StepFunction.class,org/apache/commons/math3/analysis/function/StepFunction\$*.class,org/apache/commons/math3/exception/DimensionMismatchException.class,org/apache/commons/math3/exception/DimensionMismatchException\$*.class,org/apache/commons/math3/exception/MathArithmeticException.class,org/apache/commons/math3/exception/MathArithmeticException\$*.class,org/apache/commons/math3/exception/MathIllegalArgumentException.class,org/apache/commons/math3/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math3/exception/MathIllegalNumberException.class,org/apache/commons/math3/exception/MathIllegalNumberException\$*.class,org/apache/commons/math3/exception/MathIllegalStateException.class,org/apache/commons/math3/exception/MathIllegalStateException\$*.class,org/apache/commons/math3/exception/MathInternalError.class,org/apache/commons/math3/exception/MathInternalError\$*.class,org/apache/commons/math3/exception/MaxCountExceededException.class,org/apache/commons/math3/exception/MaxCountExceededException\$*.class,org/apache/commons/math3/exception/NoDataException.class,org/apache/commons/math3/exception/NoDataException\$*.class,org/apache/commons/math3/exception/NonMonotonicSequenceException.class,org/apache/commons/math3/exception/NonMonotonicSequenceException\$*.class,org/apache/commons/math3/exception/NotStrictlyPositiveException.class,org/apache/commons/math3/exception/NotStrictlyPositiveException\$*.class,org/apache/commons/math3/exception/NullArgumentException.class,org/apache/commons/math3/exception/NullArgumentException\$*.class,org/apache/commons/math3/exception/NumberIsTooLargeException.class,org/apache/commons/math3/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math3/exception/NumberIsTooSmallException.class,org/apache/commons/math3/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math3/exception/TooManyEvaluationsException.class,org/apache/commons/math3/exception/TooManyEvaluationsException\$*.class,org/apache/commons/math3/exception/util/ExceptionContextProvider.class,org/apache/commons/math3/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math3/exception/util/Localizable.class,org/apache/commons/math3/exception/util/Localizable\$*.class,org/apache/commons/math3/optimization/BaseOptimizer.class,org/apache/commons/math3/optimization/BaseOptimizer\$*.class,org/apache/commons/math3/optimization/ConvergenceChecker.class,org/apache/commons/math3/optimization/ConvergenceChecker\$*.class,org/apache/commons/math3/optimization/GoalType.class,org/apache/commons/math3/optimization/GoalType\$*.class,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer.class,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer\$*.class,org/apache/commons/math3/optimization/univariate/BaseUnivariateOptimizer.class,org/apache/commons/math3/optimization/univariate/BaseUnivariateOptimizer\$*.class,org/apache/commons/math3/optimization/univariate/BrentOptimizer.class,org/apache/commons/math3/optimization/univariate/BrentOptimizer\$*.class,org/apache/commons/math3/optimization/univariate/UnivariateOptimizer.class,org/apache/commons/math3/optimization/univariate/UnivariateOptimizer\$*.class,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair.class,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair\$*.class,org/apache/commons/math3/util/FastMath.class,org/apache/commons/math3/util/FastMath\$*.class,org/apache/commons/math3/util/Incrementor.class,org/apache/commons/math3/util/Incrementor\$*.class,org/apache/commons/math3/util/MathArrays.class,org/apache/commons/math3/util/MathArrays\$*.class,org/apache/commons/math3/util/Precision.class,org/apache/commons/math3/util/Precision\$*.class
 d4j.classes.modified=org.apache.commons.math3.optimization.univariate.BrentOptimizer
 d4j.classes.relevant=org.apache.commons.math3.analysis.DifferentiableUnivariateFunction,org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable,org.apache.commons.math3.analysis.function.Sin,org.apache.commons.math3.analysis.function.StepFunction,org.apache.commons.math3.analysis.FunctionUtils,org.apache.commons.math3.analysis.MultivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.exception.DimensionMismatchException,org.apache.commons.math3.exception.MathArithmeticException,org.apache.commons.math3.exception.MathIllegalArgumentException,org.apache.commons.math3.exception.MathIllegalNumberException,org.apache.commons.math3.exception.MathIllegalStateException,org.apache.commons.math3.exception.MathInternalError,org.apache.commons.math3.exception.MaxCountExceededException,org.apache.commons.math3.exception.NoDataException,org.apache.commons.math3.exception.NonMonotonicSequenceException,org.apache.commons.math3.exception.NotStrictlyPositiveException,org.apache.commons.math3.exception.NullArgumentException,org.apache.commons.math3.exception.NumberIsTooLargeException,org.apache.commons.math3.exception.NumberIsTooSmallException,org.apache.commons.math3.exception.TooManyEvaluationsException,org.apache.commons.math3.exception.util.ExceptionContextProvider,org.apache.commons.math3.exception.util.Localizable,org.apache.commons.math3.optimization.BaseOptimizer,org.apache.commons.math3.optimization.ConvergenceChecker,org.apache.commons.math3.optimization.GoalType,org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer,org.apache.commons.math3.optimization.univariate.BaseUnivariateOptimizer,org.apache.commons.math3.optimization.univariate.BrentOptimizer,org.apache.commons.math3.optimization.univariate.UnivariateOptimizer,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.util.FastMath,org.apache.commons.math3.util.Incrementor,org.apache.commons.math3.util.MathArrays,org.apache.commons.math3.util.Precision
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
index 2151c48..b811dc8 100644
--- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
@@ -212,4 +212,35 @@ public final class BrentOptimizerTest {
 
         Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
     }
+    @Test
+    public void testKeepInitIfBest() {
+        final double minSin = 3 * Math.PI / 2;
+        final double offset = 1e-8;
+        final double delta = 1e-7;
+        final UnivariateFunction f1 = new Sin();
+        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},
+                                                       new double[] { 0, -1, 0 });
+        final UnivariateFunction f = FunctionUtils.add(f1, f2);
+        // A slightly less stringent tolerance would make the test pass
+        // even with the previous implementation.
+        final double relTol = 1e-8;
+        final UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);
+        final double init = minSin + 1.5 * offset;
+        final UnivariatePointValuePair result
+            = optimizer.optimize(200, f, GoalType.MINIMIZE,
+                                 minSin - 6.789 * delta,
+                                 minSin + 9.876 * delta,
+                                 init);
+        final int numEval = optimizer.getEvaluations();
+
+        final double sol = result.getPoint();
+        final double expected = init;
+
+//         System.out.println("numEval=" + numEval);
+//         System.out.println("min=" + init + " f=" + f.value(init));
+//         System.out.println("sol=" + sol + " f=" + f.value(sol));
+//         System.out.println("exp=" + expected + " f=" + f.value(expected));
+
+        Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
+    }
 }
