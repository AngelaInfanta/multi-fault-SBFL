diff --git a/defects4j.build.properties b/defects4j.build.properties
index 82871cf..b0f6fde 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=101
+d4j.classes.instrument=org/apache/commons/math/MathException.class,org/apache/commons/math/MathException\$*.class,org/apache/commons/math/complex/ComplexFormat.class,org/apache/commons/math/complex/ComplexFormat\$*.class,org/apache/commons/math/estimation/AbstractEstimator.class,org/apache/commons/math/estimation/AbstractEstimator\$*.class,org/apache/commons/math/estimation/EstimatedParameter.class,org/apache/commons/math/estimation/EstimatedParameter\$*.class,org/apache/commons/math/estimation/EstimationException.class,org/apache/commons/math/estimation/EstimationException\$*.class,org/apache/commons/math/estimation/EstimationProblem.class,org/apache/commons/math/estimation/EstimationProblem\$*.class,org/apache/commons/math/estimation/Estimator.class,org/apache/commons/math/estimation/Estimator\$*.class,org/apache/commons/math/estimation/GaussNewtonEstimator.class,org/apache/commons/math/estimation/GaussNewtonEstimator\$*.class,org/apache/commons/math/estimation/SimpleEstimationProblem.class,org/apache/commons/math/estimation/SimpleEstimationProblem\$*.class,org/apache/commons/math/estimation/WeightedMeasurement.class,org/apache/commons/math/estimation/WeightedMeasurement\$*.class,org/apache/commons/math/linear/BigMatrix.class,org/apache/commons/math/linear/BigMatrix\$*.class,org/apache/commons/math/linear/InvalidMatrixException.class,org/apache/commons/math/linear/InvalidMatrixException\$*.class,org/apache/commons/math/linear/MatrixIndexException.class,org/apache/commons/math/linear/MatrixIndexException\$*.class,org/apache/commons/math/linear/MatrixUtils.class,org/apache/commons/math/linear/MatrixUtils\$*.class,org/apache/commons/math/linear/RealMatrix.class,org/apache/commons/math/linear/RealMatrix\$*.class,org/apache/commons/math/linear/RealMatrixImpl.class,org/apache/commons/math/linear/RealMatrixImpl\$*.class
 d4j.classes.modified=org.apache.commons.math.complex.ComplexFormat
 d4j.classes.relevant=org.apache.commons.math.complex.ComplexFormat
 d4j.dir.src.classes=src/java
diff --git a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
index 4d15b4b..724d990 100644
--- a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
+++ b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
@@ -694,5 +694,42 @@ public class GaussNewtonEstimatorTest
   public static Test suite() {
     return new TestSuite(GaussNewtonEstimatorTest.class);
   }
+  public void testBoundParameters() throws EstimationException {
+      EstimatedParameter[] p = {
+        new EstimatedParameter("unbound0", 2, false),
+        new EstimatedParameter("unbound1", 2, false),
+        new EstimatedParameter("bound",    2, true)
+      };
+      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
+        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },
+                              new EstimatedParameter[] { p[0], p[1], p[2] },
+                              3.0),
+        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },
+                              new EstimatedParameter[] { p[0], p[1], p[2] },
+                              1.0),
+        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },
+                              new EstimatedParameter[] { p[0], p[1], p[2] },
+                              7.0)
+      });
+
+      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
+      estimator.estimate(problem);
+      assertTrue(estimator.getRMS(problem) < 1.0e-10);
+      double[][] covariances = estimator.getCovariances(problem);
+      int i0 = 0, i1 = 1;
+      if (problem.getUnboundParameters()[0].getName().endsWith("1")) {
+          i0 = 1;
+          i1 = 0;
+      }
+      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);
+      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);
+      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);
+      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);
+
+      double[] errors = estimator.guessParametersErrors(problem);
+      assertEquals(0, errors[i0], 1.0e-10);
+      assertEquals(0, errors[i1], 1.0e-10);
+
+  }
 
 }
