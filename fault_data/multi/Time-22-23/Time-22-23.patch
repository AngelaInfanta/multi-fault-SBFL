diff --git a/defects4j.build.properties b/defects4j.build.properties
index adfd5a4..5610a1f 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=23
+d4j.classes.instrument=org/joda/time/Chronology.class,org/joda/time/Chronology\$*.class,org/joda/time/DateTimeField.class,org/joda/time/DateTimeField\$*.class,org/joda/time/DateTimeFieldType.class,org/joda/time/DateTimeFieldType\$*.class,org/joda/time/DateTimeUtils.class,org/joda/time/DateTimeUtils\$*.class,org/joda/time/DateTimeZone.class,org/joda/time/DateTimeZone\$*.class,org/joda/time/Duration.class,org/joda/time/Duration\$*.class,org/joda/time/DurationField.class,org/joda/time/DurationField\$*.class,org/joda/time/DurationFieldType.class,org/joda/time/DurationFieldType\$*.class,org/joda/time/IllegalFieldValueException.class,org/joda/time/IllegalFieldValueException\$*.class,org/joda/time/JodaTimePermission.class,org/joda/time/JodaTimePermission\$*.class,org/joda/time/Period.class,org/joda/time/Period\$*.class,org/joda/time/PeriodType.class,org/joda/time/PeriodType\$*.class,org/joda/time/ReadableDuration.class,org/joda/time/ReadableDuration\$*.class,org/joda/time/ReadableInstant.class,org/joda/time/ReadableInstant\$*.class,org/joda/time/ReadableInterval.class,org/joda/time/ReadableInterval\$*.class,org/joda/time/ReadablePartial.class,org/joda/time/ReadablePartial\$*.class,org/joda/time/ReadablePeriod.class,org/joda/time/ReadablePeriod\$*.class,org/joda/time/base/AbstractDuration.class,org/joda/time/base/AbstractDuration\$*.class,org/joda/time/base/AbstractPeriod.class,org/joda/time/base/AbstractPeriod\$*.class,org/joda/time/base/BaseDuration.class,org/joda/time/base/BaseDuration\$*.class,org/joda/time/base/BasePeriod.class,org/joda/time/base/BasePeriod\$*.class,org/joda/time/chrono/AssembledChronology.class,org/joda/time/chrono/AssembledChronology\$*.class,org/joda/time/chrono/BaseChronology.class,org/joda/time/chrono/BaseChronology\$*.class,org/joda/time/chrono/BasicChronology.class,org/joda/time/chrono/BasicChronology\$*.class,org/joda/time/chrono/BasicDayOfMonthDateTimeField.class,org/joda/time/chrono/BasicDayOfMonthDateTimeField\$*.class,org/joda/time/chrono/BasicDayOfYearDateTimeField.class,org/joda/time/chrono/BasicDayOfYearDateTimeField\$*.class,org/joda/time/chrono/BasicFixedMonthChronology.class,org/joda/time/chrono/BasicFixedMonthChronology\$*.class,org/joda/time/chrono/BasicGJChronology.class,org/joda/time/chrono/BasicGJChronology\$*.class,org/joda/time/chrono/BasicMonthOfYearDateTimeField.class,org/joda/time/chrono/BasicMonthOfYearDateTimeField\$*.class,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.class,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField\$*.class,org/joda/time/chrono/BasicWeekyearDateTimeField.class,org/joda/time/chrono/BasicWeekyearDateTimeField\$*.class,org/joda/time/chrono/BasicYearDateTimeField.class,org/joda/time/chrono/BasicYearDateTimeField\$*.class,org/joda/time/chrono/CopticChronology.class,org/joda/time/chrono/CopticChronology\$*.class,org/joda/time/chrono/GJDayOfWeekDateTimeField.class,org/joda/time/chrono/GJDayOfWeekDateTimeField\$*.class,org/joda/time/chrono/GJEraDateTimeField.class,org/joda/time/chrono/GJEraDateTimeField\$*.class,org/joda/time/chrono/GJMonthOfYearDateTimeField.class,org/joda/time/chrono/GJMonthOfYearDateTimeField\$*.class,org/joda/time/chrono/GJYearOfEraDateTimeField.class,org/joda/time/chrono/GJYearOfEraDateTimeField\$*.class,org/joda/time/chrono/GregorianChronology.class,org/joda/time/chrono/GregorianChronology\$*.class,org/joda/time/chrono/ISOChronology.class,org/joda/time/chrono/ISOChronology\$*.class,org/joda/time/chrono/ISOYearOfEraDateTimeField.class,org/joda/time/chrono/ISOYearOfEraDateTimeField\$*.class,org/joda/time/chrono/ZonedChronology.class,org/joda/time/chrono/ZonedChronology\$*.class,org/joda/time/field/BaseDateTimeField.class,org/joda/time/field/BaseDateTimeField\$*.class,org/joda/time/field/BaseDurationField.class,org/joda/time/field/BaseDurationField\$*.class,org/joda/time/field/DecoratedDateTimeField.class,org/joda/time/field/DecoratedDateTimeField\$*.class,org/joda/time/field/DecoratedDurationField.class,org/joda/time/field/DecoratedDurationField\$*.class,org/joda/time/field/DividedDateTimeField.class,org/joda/time/field/DividedDateTimeField\$*.class,org/joda/time/field/FieldUtils.class,org/joda/time/field/FieldUtils\$*.class,org/joda/time/field/ImpreciseDateTimeField.class,org/joda/time/field/ImpreciseDateTimeField\$*.class,org/joda/time/field/MillisDurationField.class,org/joda/time/field/MillisDurationField\$*.class,org/joda/time/field/OffsetDateTimeField.class,org/joda/time/field/OffsetDateTimeField\$*.class,org/joda/time/field/PreciseDateTimeField.class,org/joda/time/field/PreciseDateTimeField\$*.class,org/joda/time/field/PreciseDurationDateTimeField.class,org/joda/time/field/PreciseDurationDateTimeField\$*.class,org/joda/time/field/PreciseDurationField.class,org/joda/time/field/PreciseDurationField\$*.class,org/joda/time/field/RemainderDateTimeField.class,org/joda/time/field/RemainderDateTimeField\$*.class,org/joda/time/field/ScaledDurationField.class,org/joda/time/field/ScaledDurationField\$*.class,org/joda/time/field/UnsupportedDateTimeField.class,org/joda/time/field/UnsupportedDateTimeField\$*.class,org/joda/time/field/UnsupportedDurationField.class,org/joda/time/field/UnsupportedDurationField\$*.class,org/joda/time/field/ZeroIsMaxDateTimeField.class,org/joda/time/field/ZeroIsMaxDateTimeField\$*.class,org/joda/time/format/FormatUtils.class,org/joda/time/format/FormatUtils\$*.class,org/joda/time/tz/CachedDateTimeZone.class,org/joda/time/tz/CachedDateTimeZone\$*.class,org/joda/time/tz/DateTimeZoneBuilder.class,org/joda/time/tz/DateTimeZoneBuilder\$*.class,org/joda/time/tz/DefaultNameProvider.class,org/joda/time/tz/DefaultNameProvider\$*.class,org/joda/time/tz/FixedDateTimeZone.class,org/joda/time/tz/FixedDateTimeZone\$*.class,org/joda/time/tz/NameProvider.class,org/joda/time/tz/NameProvider\$*.class,org/joda/time/tz/Provider.class,org/joda/time/tz/Provider\$*.class,org/joda/time/tz/ZoneInfoProvider.class,org/joda/time/tz/ZoneInfoProvider\$*.class
 d4j.classes.modified=org.joda.time.DateTimeZone
 d4j.classes.relevant=org.joda.time.chrono.AssembledChronology,org.joda.time.chrono.BaseChronology,org.joda.time.chrono.ISOChronology,org.joda.time.Chronology,org.joda.time.DateTimeZone,org.joda.time.JodaTimePermission,org.joda.time.ReadableInstant,org.joda.time.tz.CachedDateTimeZone,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.tz.DefaultNameProvider,org.joda.time.tz.FixedDateTimeZone,org.joda.time.tz.NameProvider,org.joda.time.tz.Provider,org.joda.time.tz.ZoneInfoProvider
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/joda/time/TestDuration_Basics.java b/src/test/java/org/joda/time/TestDuration_Basics.java
index 4caa6e2..585be3f 100644
--- a/src/test/java/org/joda/time/TestDuration_Basics.java
+++ b/src/test/java/org/joda/time/TestDuration_Basics.java
@@ -734,6 +734,29 @@ public class TestDuration_Basics extends TestCase {
         public void setMillis(long duration) {
             super.setMillis(duration);
         }
+    public void testToPeriod_fixedZone() throws Throwable {
+        DateTimeZone zone = DateTimeZone.getDefault();
+        try {
+            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
+            long length =
+                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
+                5L * DateTimeConstants.MILLIS_PER_HOUR +
+                6L * DateTimeConstants.MILLIS_PER_MINUTE +
+                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
+            Duration dur = new Duration(length);
+            Period test = dur.toPeriod();
+            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450
+            assertEquals(0, test.getMonths());
+            assertEquals(0, test.getWeeks());
+            assertEquals(0, test.getDays());
+            assertEquals((450 * 24) + 5, test.getHours());
+            assertEquals(6, test.getMinutes());
+            assertEquals(7, test.getSeconds());
+            assertEquals(8, test.getMillis());
+        } finally {
+            DateTimeZone.setDefault(zone);
+        }
+    }
     }
 
 }
diff --git a/src/test/java/org/joda/time/TestPeriod_Constructors.java b/src/test/java/org/joda/time/TestPeriod_Constructors.java
index d1369ee..55af234 100644
--- a/src/test/java/org/joda/time/TestPeriod_Constructors.java
+++ b/src/test/java/org/joda/time/TestPeriod_Constructors.java
@@ -1354,5 +1354,29 @@ public class TestPeriod_Constructors extends TestCase {
             fail();
         } catch (IllegalArgumentException ex) {}
     }
+    public void testConstructor_long_fixedZone() throws Throwable {
+        DateTimeZone zone = DateTimeZone.getDefault();
+        try {
+            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
+            long length =
+                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
+                5L * DateTimeConstants.MILLIS_PER_HOUR +
+                6L * DateTimeConstants.MILLIS_PER_MINUTE +
+                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
+            Period test = new Period(length);
+            assertEquals(PeriodType.standard(), test.getPeriodType());
+            // only time fields are precise in AllType
+            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450
+            assertEquals(0, test.getMonths());
+            assertEquals(0, test.getWeeks());
+            assertEquals(0, test.getDays());
+            assertEquals((450 * 24) + 5, test.getHours());
+            assertEquals(6, test.getMinutes());
+            assertEquals(7, test.getSeconds());
+            assertEquals(8, test.getMillis());
+        } finally {
+            DateTimeZone.setDefault(zone);
+        }
+    }
 
 }
