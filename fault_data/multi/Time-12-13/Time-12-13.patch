diff --git a/defects4j.build.properties b/defects4j.build.properties
index b57d0d9..93ce6f2 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=13
+d4j.classes.instrument=org/joda/time/Chronology.class,org/joda/time/Chronology\$*.class,org/joda/time/DateTime.class,org/joda/time/DateTime\$*.class,org/joda/time/DateTimeField.class,org/joda/time/DateTimeField\$*.class,org/joda/time/DateTimeFieldType.class,org/joda/time/DateTimeFieldType\$*.class,org/joda/time/DateTimeUtils.class,org/joda/time/DateTimeUtils\$*.class,org/joda/time/DateTimeZone.class,org/joda/time/DateTimeZone\$*.class,org/joda/time/DurationField.class,org/joda/time/DurationField\$*.class,org/joda/time/DurationFieldType.class,org/joda/time/DurationFieldType\$*.class,org/joda/time/IllegalFieldValueException.class,org/joda/time/IllegalFieldValueException\$*.class,org/joda/time/Instant.class,org/joda/time/Instant\$*.class,org/joda/time/JodaTimePermission.class,org/joda/time/JodaTimePermission\$*.class,org/joda/time/LocalDate.class,org/joda/time/LocalDate\$*.class,org/joda/time/LocalDateTime.class,org/joda/time/LocalDateTime\$*.class,org/joda/time/Period.class,org/joda/time/Period\$*.class,org/joda/time/PeriodType.class,org/joda/time/PeriodType\$*.class,org/joda/time/ReadWritablePeriod.class,org/joda/time/ReadWritablePeriod\$*.class,org/joda/time/ReadableDateTime.class,org/joda/time/ReadableDateTime\$*.class,org/joda/time/ReadableInstant.class,org/joda/time/ReadableInstant\$*.class,org/joda/time/ReadableInterval.class,org/joda/time/ReadableInterval\$*.class,org/joda/time/ReadablePartial.class,org/joda/time/ReadablePartial\$*.class,org/joda/time/ReadablePeriod.class,org/joda/time/ReadablePeriod\$*.class,org/joda/time/base/AbstractDateTime.class,org/joda/time/base/AbstractDateTime\$*.class,org/joda/time/base/AbstractInstant.class,org/joda/time/base/AbstractInstant\$*.class,org/joda/time/base/AbstractPartial.class,org/joda/time/base/AbstractPartial\$*.class,org/joda/time/base/AbstractPeriod.class,org/joda/time/base/AbstractPeriod\$*.class,org/joda/time/base/BaseDateTime.class,org/joda/time/base/BaseDateTime\$*.class,org/joda/time/base/BaseLocal.class,org/joda/time/base/BaseLocal\$*.class,org/joda/time/base/BasePeriod.class,org/joda/time/base/BasePeriod\$*.class,org/joda/time/chrono/AssembledChronology.class,org/joda/time/chrono/AssembledChronology\$*.class,org/joda/time/chrono/BaseChronology.class,org/joda/time/chrono/BaseChronology\$*.class,org/joda/time/chrono/BasicChronology.class,org/joda/time/chrono/BasicChronology\$*.class,org/joda/time/chrono/BasicDayOfMonthDateTimeField.class,org/joda/time/chrono/BasicDayOfMonthDateTimeField\$*.class,org/joda/time/chrono/BasicDayOfYearDateTimeField.class,org/joda/time/chrono/BasicDayOfYearDateTimeField\$*.class,org/joda/time/chrono/BasicGJChronology.class,org/joda/time/chrono/BasicGJChronology\$*.class,org/joda/time/chrono/BasicMonthOfYearDateTimeField.class,org/joda/time/chrono/BasicMonthOfYearDateTimeField\$*.class,org/joda/time/chrono/BasicSingleEraDateTimeField.class,org/joda/time/chrono/BasicSingleEraDateTimeField\$*.class,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.class,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField\$*.class,org/joda/time/chrono/BasicWeekyearDateTimeField.class,org/joda/time/chrono/BasicWeekyearDateTimeField\$*.class,org/joda/time/chrono/BasicYearDateTimeField.class,org/joda/time/chrono/BasicYearDateTimeField\$*.class,org/joda/time/chrono/BuddhistChronology.class,org/joda/time/chrono/BuddhistChronology\$*.class,org/joda/time/chrono/GJChronology.class,org/joda/time/chrono/GJChronology\$*.class,org/joda/time/chrono/GJDayOfWeekDateTimeField.class,org/joda/time/chrono/GJDayOfWeekDateTimeField\$*.class,org/joda/time/chrono/GJEraDateTimeField.class,org/joda/time/chrono/GJEraDateTimeField\$*.class,org/joda/time/chrono/GJMonthOfYearDateTimeField.class,org/joda/time/chrono/GJMonthOfYearDateTimeField\$*.class,org/joda/time/chrono/GJYearOfEraDateTimeField.class,org/joda/time/chrono/GJYearOfEraDateTimeField\$*.class,org/joda/time/chrono/GregorianChronology.class,org/joda/time/chrono/GregorianChronology\$*.class,org/joda/time/chrono/ISOChronology.class,org/joda/time/chrono/ISOChronology\$*.class,org/joda/time/chrono/ISOYearOfEraDateTimeField.class,org/joda/time/chrono/ISOYearOfEraDateTimeField\$*.class,org/joda/time/chrono/JulianChronology.class,org/joda/time/chrono/JulianChronology\$*.class,org/joda/time/chrono/LimitChronology.class,org/joda/time/chrono/LimitChronology\$*.class,org/joda/time/chrono/ZonedChronology.class,org/joda/time/chrono/ZonedChronology\$*.class,org/joda/time/field/BaseDateTimeField.class,org/joda/time/field/BaseDateTimeField\$*.class,org/joda/time/field/BaseDurationField.class,org/joda/time/field/BaseDurationField\$*.class,org/joda/time/field/DecoratedDateTimeField.class,org/joda/time/field/DecoratedDateTimeField\$*.class,org/joda/time/field/DecoratedDurationField.class,org/joda/time/field/DecoratedDurationField\$*.class,org/joda/time/field/DelegatedDateTimeField.class,org/joda/time/field/DelegatedDateTimeField\$*.class,org/joda/time/field/DividedDateTimeField.class,org/joda/time/field/DividedDateTimeField\$*.class,org/joda/time/field/FieldUtils.class,org/joda/time/field/FieldUtils\$*.class,org/joda/time/field/ImpreciseDateTimeField.class,org/joda/time/field/ImpreciseDateTimeField\$*.class,org/joda/time/field/MillisDurationField.class,org/joda/time/field/MillisDurationField\$*.class,org/joda/time/field/OffsetDateTimeField.class,org/joda/time/field/OffsetDateTimeField\$*.class,org/joda/time/field/PreciseDateTimeField.class,org/joda/time/field/PreciseDateTimeField\$*.class,org/joda/time/field/PreciseDurationDateTimeField.class,org/joda/time/field/PreciseDurationDateTimeField\$*.class,org/joda/time/field/PreciseDurationField.class,org/joda/time/field/PreciseDurationField\$*.class,org/joda/time/field/RemainderDateTimeField.class,org/joda/time/field/RemainderDateTimeField\$*.class,org/joda/time/field/ScaledDurationField.class,org/joda/time/field/ScaledDurationField\$*.class,org/joda/time/field/SkipDateTimeField.class,org/joda/time/field/SkipDateTimeField\$*.class,org/joda/time/field/SkipUndoDateTimeField.class,org/joda/time/field/SkipUndoDateTimeField\$*.class,org/joda/time/field/UnsupportedDateTimeField.class,org/joda/time/field/UnsupportedDateTimeField\$*.class,org/joda/time/field/UnsupportedDurationField.class,org/joda/time/field/UnsupportedDurationField\$*.class,org/joda/time/field/ZeroIsMaxDateTimeField.class,org/joda/time/field/ZeroIsMaxDateTimeField\$*.class,org/joda/time/format/FormatUtils.class,org/joda/time/format/FormatUtils\$*.class,org/joda/time/format/ISOPeriodFormat.class,org/joda/time/format/ISOPeriodFormat\$*.class,org/joda/time/format/PeriodFormatter.class,org/joda/time/format/PeriodFormatter\$*.class,org/joda/time/format/PeriodFormatterBuilder.class,org/joda/time/format/PeriodFormatterBuilder\$*.class,org/joda/time/format/PeriodParser.class,org/joda/time/format/PeriodParser\$*.class,org/joda/time/format/PeriodPrinter.class,org/joda/time/format/PeriodPrinter\$*.class,org/joda/time/tz/CachedDateTimeZone.class,org/joda/time/tz/CachedDateTimeZone\$*.class,org/joda/time/tz/DateTimeZoneBuilder.class,org/joda/time/tz/DateTimeZoneBuilder\$*.class,org/joda/time/tz/DefaultNameProvider.class,org/joda/time/tz/DefaultNameProvider\$*.class,org/joda/time/tz/FixedDateTimeZone.class,org/joda/time/tz/FixedDateTimeZone\$*.class,org/joda/time/tz/NameProvider.class,org/joda/time/tz/NameProvider\$*.class,org/joda/time/tz/Provider.class,org/joda/time/tz/Provider\$*.class,org/joda/time/tz/ZoneInfoProvider.class,org/joda/time/tz/ZoneInfoProvider\$*.class
 d4j.classes.modified=org.joda.time.format.PeriodFormatterBuilder
 d4j.classes.relevant=org.joda.time.base.AbstractPeriod,org.joda.time.base.BasePeriod,org.joda.time.chrono.AssembledChronology,org.joda.time.chrono.BaseChronology,org.joda.time.chrono.BasicChronology,org.joda.time.chrono.BasicDayOfMonthDateTimeField,org.joda.time.chrono.BasicDayOfYearDateTimeField,org.joda.time.chrono.BasicGJChronology,org.joda.time.chrono.BasicMonthOfYearDateTimeField,org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField,org.joda.time.chrono.BasicWeekyearDateTimeField,org.joda.time.chrono.BasicYearDateTimeField,org.joda.time.chrono.GJDayOfWeekDateTimeField,org.joda.time.chrono.GJEraDateTimeField,org.joda.time.chrono.GJMonthOfYearDateTimeField,org.joda.time.chrono.GJYearOfEraDateTimeField,org.joda.time.chrono.GregorianChronology,org.joda.time.chrono.ISOChronology,org.joda.time.chrono.ISOYearOfEraDateTimeField,org.joda.time.chrono.ZonedChronology,org.joda.time.Chronology,org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,org.joda.time.DateTimeUtils,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationFieldType,org.joda.time.field.BaseDateTimeField,org.joda.time.field.BaseDurationField,org.joda.time.field.DecoratedDateTimeField,org.joda.time.field.DecoratedDurationField,org.joda.time.field.DividedDateTimeField,org.joda.time.field.ImpreciseDateTimeField,org.joda.time.field.MillisDurationField,org.joda.time.field.OffsetDateTimeField,org.joda.time.field.PreciseDateTimeField,org.joda.time.field.PreciseDurationDateTimeField,org.joda.time.field.PreciseDurationField,org.joda.time.field.RemainderDateTimeField,org.joda.time.field.ScaledDurationField,org.joda.time.field.UnsupportedDateTimeField,org.joda.time.field.UnsupportedDurationField,org.joda.time.field.ZeroIsMaxDateTimeField,org.joda.time.format.FormatUtils,org.joda.time.format.ISOPeriodFormat,org.joda.time.format.PeriodFormatter,org.joda.time.format.PeriodFormatterBuilder,org.joda.time.format.PeriodParser,org.joda.time.format.PeriodPrinter,org.joda.time.IllegalFieldValueException,org.joda.time.JodaTimePermission,org.joda.time.Period,org.joda.time.PeriodType,org.joda.time.ReadableInstant,org.joda.time.ReadableInterval,org.joda.time.ReadablePeriod,org.joda.time.ReadWritablePeriod,org.joda.time.tz.CachedDateTimeZone,org.joda.time.tz.DateTimeZoneBuilder,org.joda.time.tz.DefaultNameProvider,org.joda.time.tz.FixedDateTimeZone,org.joda.time.tz.NameProvider,org.joda.time.tz.Provider,org.joda.time.tz.ZoneInfoProvider
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
index 853e1e6..291d9fc 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
@@ -724,5 +724,33 @@ public class TestLocalDateTime_Constructors extends TestCase {
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+    }
+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+    }
 
 }
diff --git a/src/test/java/org/joda/time/TestLocalDate_Constructors.java b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
index acd703c..a6a94ce 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
@@ -543,5 +543,33 @@ public class TestLocalDate_Constructors extends TestCase {
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(0, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(-2, 2, 3);
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
+    }
+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(0, 2, 3);
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
+        cal.set(Calendar.ERA, GregorianCalendar.BC);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(-2, 2, 3);
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
+    }
 
 }
