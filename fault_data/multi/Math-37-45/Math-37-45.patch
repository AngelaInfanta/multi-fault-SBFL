diff --git a/defects4j.build.properties b/defects4j.build.properties
index 7aa19fa..3171e3e 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=45
+d4j.classes.instrument=org/apache/commons/math/Field.class,org/apache/commons/math/Field\$*.class,org/apache/commons/math/FieldElement.class,org/apache/commons/math/FieldElement\$*.class,org/apache/commons/math/complex/Complex.class,org/apache/commons/math/complex/Complex\$*.class,org/apache/commons/math/exception/DimensionMismatchException.class,org/apache/commons/math/exception/DimensionMismatchException\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MultiDimensionMismatchException.class,org/apache/commons/math/exception/MultiDimensionMismatchException\$*.class,org/apache/commons/math/exception/NoDataException.class,org/apache/commons/math/exception/NoDataException\$*.class,org/apache/commons/math/exception/NotPositiveException.class,org/apache/commons/math/exception/NotPositiveException\$*.class,org/apache/commons/math/exception/NotStrictlyPositiveException.class,org/apache/commons/math/exception/NotStrictlyPositiveException\$*.class,org/apache/commons/math/exception/NullArgumentException.class,org/apache/commons/math/exception/NullArgumentException\$*.class,org/apache/commons/math/exception/NumberIsTooLargeException.class,org/apache/commons/math/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math/exception/NumberIsTooSmallException.class,org/apache/commons/math/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math/exception/util/ArgUtils.class,org/apache/commons/math/exception/util/ArgUtils\$*.class,org/apache/commons/math/exception/util/ExceptionContext.class,org/apache/commons/math/exception/util/ExceptionContext\$*.class,org/apache/commons/math/exception/util/ExceptionContextProvider.class,org/apache/commons/math/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/exception/util/LocalizedFormats.class,org/apache/commons/math/exception/util/LocalizedFormats\$*.class,org/apache/commons/math/linear/AbstractRealMatrix.class,org/apache/commons/math/linear/AbstractRealMatrix\$*.class,org/apache/commons/math/linear/AnyMatrix.class,org/apache/commons/math/linear/AnyMatrix\$*.class,org/apache/commons/math/linear/ArrayRealVector.class,org/apache/commons/math/linear/ArrayRealVector\$*.class,org/apache/commons/math/linear/MatrixDimensionMismatchException.class,org/apache/commons/math/linear/MatrixDimensionMismatchException\$*.class,org/apache/commons/math/linear/NonSquareMatrixException.class,org/apache/commons/math/linear/NonSquareMatrixException\$*.class,org/apache/commons/math/linear/OpenMapRealMatrix.class,org/apache/commons/math/linear/OpenMapRealMatrix\$*.class,org/apache/commons/math/linear/RealLinearOperator.class,org/apache/commons/math/linear/RealLinearOperator\$*.class,org/apache/commons/math/linear/RealMatrix.class,org/apache/commons/math/linear/RealMatrix\$*.class,org/apache/commons/math/linear/RealMatrixChangingVisitor.class,org/apache/commons/math/linear/RealMatrixChangingVisitor\$*.class,org/apache/commons/math/linear/RealMatrixPreservingVisitor.class,org/apache/commons/math/linear/RealMatrixPreservingVisitor\$*.class,org/apache/commons/math/linear/RealVector.class,org/apache/commons/math/linear/RealVector\$*.class,org/apache/commons/math/linear/SparseRealMatrix.class,org/apache/commons/math/linear/SparseRealMatrix\$*.class,org/apache/commons/math/stat/inference/ChiSquareTest.class,org/apache/commons/math/stat/inference/ChiSquareTest\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class,org/apache/commons/math/util/FastMathLiteralArrays.class,org/apache/commons/math/util/FastMathLiteralArrays\$*.class
 d4j.classes.modified=org.apache.commons.math.linear.OpenMapRealMatrix
 d4j.classes.relevant=org.apache.commons.math.exception.DimensionMismatchException,org.apache.commons.math.exception.MathIllegalArgumentException,org.apache.commons.math.exception.MathIllegalNumberException,org.apache.commons.math.exception.MultiDimensionMismatchException,org.apache.commons.math.exception.NoDataException,org.apache.commons.math.exception.NotStrictlyPositiveException,org.apache.commons.math.exception.NumberIsTooLargeException,org.apache.commons.math.exception.NumberIsTooSmallException,org.apache.commons.math.exception.util.ArgUtils,org.apache.commons.math.exception.util.ExceptionContext,org.apache.commons.math.exception.util.ExceptionContextProvider,org.apache.commons.math.exception.util.Localizable,org.apache.commons.math.exception.util.LocalizedFormats,org.apache.commons.math.linear.AbstractRealMatrix,org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.ArrayRealVector,org.apache.commons.math.linear.MatrixDimensionMismatchException,org.apache.commons.math.linear.NonSquareMatrixException,org.apache.commons.math.linear.OpenMapRealMatrix,org.apache.commons.math.linear.RealLinearOperator,org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrixChangingVisitor,org.apache.commons.math.linear.RealMatrixPreservingVisitor,org.apache.commons.math.linear.RealVector,org.apache.commons.math.linear.SparseRealMatrix
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/complex/ComplexTest.java b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
index 9b8e3fb..6f420d2 100644
--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java
+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
@@ -997,6 +997,13 @@ public class ComplexTest {
         Complex z = new Complex(3, 4);
         Complex expected = new Complex(-0.000187346, 0.999356);
         TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
+        /* Check that no overflow occurs (MATH-722) */
+        Complex actual = new Complex(3.0, 1E10).tan();
+        expected = new Complex(0, 1);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
+        actual = new Complex(3.0, -1E10).tan();
+        expected = new Complex(0, -1);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
     }
 
     @Test
@@ -1006,8 +1013,8 @@ public class ComplexTest {
 
     @Test
     public void testTanInf() {
-        TestUtils.assertSame(zeroNaN, oneInf.tan());
-        TestUtils.assertSame(zeroNaN, oneNegInf.tan());
+        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
+        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());
         TestUtils.assertSame(Complex.NaN, infOne.tan());
         TestUtils.assertSame(Complex.NaN, negInfOne.tan());
         TestUtils.assertSame(Complex.NaN, infInf.tan());
@@ -1027,6 +1034,13 @@ public class ComplexTest {
         Complex z = new Complex(3, 4);
         Complex expected = new Complex(1.00071, 0.00490826);
         TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
+        /* Check that no overflow occurs (MATH-722) */
+        Complex actual = new Complex(1E10, 3.0).tanh();
+        expected = new Complex(1, 0);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
+        actual = new Complex(-1E10, 3.0).tanh();
+        expected = new Complex(-1, 0);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
     }
 
     @Test
@@ -1038,8 +1052,8 @@ public class ComplexTest {
     public void testTanhInf() {
         TestUtils.assertSame(Complex.NaN, oneInf.tanh());
         TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
-        TestUtils.assertSame(nanZero, infOne.tanh());
-        TestUtils.assertSame(nanZero, negInfOne.tanh());
+        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
+        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());
         TestUtils.assertSame(Complex.NaN, infInf.tanh());
         TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
         TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
