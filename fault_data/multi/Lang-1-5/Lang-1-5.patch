diff --git a/defects4j.build.properties b/defects4j.build.properties
index 6cc785d..0c134e2 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=5
+d4j.classes.instrument=org/apache/commons/lang3/LocaleUtils.class,org/apache/commons/lang3/LocaleUtils\$*.class,org/apache/commons/lang3/StringUtils.class,org/apache/commons/lang3/StringUtils\$*.class,org/apache/commons/lang3/math/NumberUtils.class,org/apache/commons/lang3/math/NumberUtils\$*.class
 d4j.classes.modified=org.apache.commons.lang3.LocaleUtils
 d4j.classes.relevant=org.apache.commons.lang3.LocaleUtils
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
index a624755..c930626 100644
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -1336,5 +1336,41 @@ public class NumberUtilsTest {
         float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };
         assertTrue(Float.isNaN(NumberUtils.max(bF)));
     }
+    @Test
+    public void TestLang747() {
+        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber("0x8000"));
+        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber("0x80000"));
+        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber("0x800000"));
+        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x8000000"));
+        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x7FFFFFFF"));
+        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x80000000"));
+        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0xFFFFFFFF"));
+
+        // Leading zero tests
+        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x08000000"));
+        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x007FFFFFFF"));
+        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x080000000"));
+        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0x00FFFFFFFF"));
+
+        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber("0x800000000"));
+        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber("0x8000000000"));
+        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber("0x80000000000"));
+        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber("0x800000000000"));
+        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber("0x8000000000000"));
+        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x80000000000000"));
+        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x800000000000000"));
+        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
+        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
+        assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
+        assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
+
+        // Leading zero tests
+        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x00080000000000000"));
+        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x0800000000000000"));
+        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
+        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
+        assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
+        assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
+    }
 
 }
