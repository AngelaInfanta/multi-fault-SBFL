diff --git a/defects4j.build.properties b/defects4j.build.properties
index a92cdd3..ed5efe3 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=44
+d4j.classes.instrument=org/apache/commons/math/Field.class,org/apache/commons/math/Field\$*.class,org/apache/commons/math/FieldElement.class,org/apache/commons/math/FieldElement\$*.class,org/apache/commons/math/analysis/UnivariateRealFunction.class,org/apache/commons/math/analysis/UnivariateRealFunction\$*.class,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/AllowedSolution.class,org/apache/commons/math/analysis/solvers/AllowedSolution\$*.class,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/BaseUnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/BracketedUnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.class,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolver.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolver\$*.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.class,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils\$*.class,org/apache/commons/math/complex/Complex.class,org/apache/commons/math/complex/Complex\$*.class,org/apache/commons/math/exception/DimensionMismatchException.class,org/apache/commons/math/exception/DimensionMismatchException\$*.class,org/apache/commons/math/exception/MathArithmeticException.class,org/apache/commons/math/exception/MathArithmeticException\$*.class,org/apache/commons/math/exception/MathIllegalArgumentException.class,org/apache/commons/math/exception/MathIllegalArgumentException\$*.class,org/apache/commons/math/exception/MathIllegalNumberException.class,org/apache/commons/math/exception/MathIllegalNumberException\$*.class,org/apache/commons/math/exception/MathIllegalStateException.class,org/apache/commons/math/exception/MathIllegalStateException\$*.class,org/apache/commons/math/exception/MathInternalError.class,org/apache/commons/math/exception/MathInternalError\$*.class,org/apache/commons/math/exception/MaxCountExceededException.class,org/apache/commons/math/exception/MaxCountExceededException\$*.class,org/apache/commons/math/exception/NoBracketingException.class,org/apache/commons/math/exception/NoBracketingException\$*.class,org/apache/commons/math/exception/NotFiniteNumberException.class,org/apache/commons/math/exception/NotFiniteNumberException\$*.class,org/apache/commons/math/exception/NotPositiveException.class,org/apache/commons/math/exception/NotPositiveException\$*.class,org/apache/commons/math/exception/NotStrictlyPositiveException.class,org/apache/commons/math/exception/NotStrictlyPositiveException\$*.class,org/apache/commons/math/exception/NullArgumentException.class,org/apache/commons/math/exception/NullArgumentException\$*.class,org/apache/commons/math/exception/NumberIsTooLargeException.class,org/apache/commons/math/exception/NumberIsTooLargeException\$*.class,org/apache/commons/math/exception/NumberIsTooSmallException.class,org/apache/commons/math/exception/NumberIsTooSmallException\$*.class,org/apache/commons/math/exception/TooManyEvaluationsException.class,org/apache/commons/math/exception/TooManyEvaluationsException\$*.class,org/apache/commons/math/exception/util/ExceptionContextProvider.class,org/apache/commons/math/exception/util/ExceptionContextProvider\$*.class,org/apache/commons/math/exception/util/Localizable.class,org/apache/commons/math/exception/util/Localizable\$*.class,org/apache/commons/math/ode/AbstractIntegrator.class,org/apache/commons/math/ode/AbstractIntegrator\$*.class,org/apache/commons/math/ode/EquationsMapper.class,org/apache/commons/math/ode/EquationsMapper\$*.class,org/apache/commons/math/ode/ExpandableStatefulODE.class,org/apache/commons/math/ode/ExpandableStatefulODE\$*.class,org/apache/commons/math/ode/FirstOrderDifferentialEquations.class,org/apache/commons/math/ode/FirstOrderDifferentialEquations\$*.class,org/apache/commons/math/ode/FirstOrderIntegrator.class,org/apache/commons/math/ode/FirstOrderIntegrator\$*.class,org/apache/commons/math/ode/ODEIntegrator.class,org/apache/commons/math/ode/ODEIntegrator\$*.class,org/apache/commons/math/ode/events/EventHandler.class,org/apache/commons/math/ode/events/EventHandler\$*.class,org/apache/commons/math/ode/events/EventState.class,org/apache/commons/math/ode/events/EventState\$*.class,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.class,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator\$*.class,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator.class,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator\$*.class,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.class,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator\$*.class,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.class,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator\$*.class,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.class,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator\$*.class,org/apache/commons/math/ode/sampling/AbstractStepInterpolator.class,org/apache/commons/math/ode/sampling/AbstractStepInterpolator\$*.class,org/apache/commons/math/ode/sampling/StepInterpolator.class,org/apache/commons/math/ode/sampling/StepInterpolator\$*.class,org/apache/commons/math/stat/inference/ChiSquareTest.class,org/apache/commons/math/stat/inference/ChiSquareTest\$*.class,org/apache/commons/math/util/FastMath.class,org/apache/commons/math/util/FastMath\$*.class,org/apache/commons/math/util/FastMathLiteralArrays.class,org/apache/commons/math/util/FastMathLiteralArrays\$*.class,org/apache/commons/math/util/Incrementor.class,org/apache/commons/math/util/Incrementor\$*.class,org/apache/commons/math/util/MathUtils.class,org/apache/commons/math/util/MathUtils\$*.class,org/apache/commons/math/util/Precision.class,org/apache/commons/math/util/Precision\$*.class
 d4j.classes.modified=org.apache.commons.math.ode.AbstractIntegrator
 d4j.classes.relevant=org.apache.commons.math.analysis.solvers.AbstractUnivariateRealSolver,org.apache.commons.math.analysis.solvers.AllowedSolution,org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver,org.apache.commons.math.analysis.solvers.BaseUnivariateRealSolver,org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver,org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,org.apache.commons.math.analysis.solvers.UnivariateRealSolver,org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,org.apache.commons.math.analysis.UnivariateRealFunction,org.apache.commons.math.exception.DimensionMismatchException,org.apache.commons.math.exception.MathArithmeticException,org.apache.commons.math.exception.MathIllegalArgumentException,org.apache.commons.math.exception.MathIllegalNumberException,org.apache.commons.math.exception.MathIllegalStateException,org.apache.commons.math.exception.MathInternalError,org.apache.commons.math.exception.MaxCountExceededException,org.apache.commons.math.exception.NoBracketingException,org.apache.commons.math.exception.NotFiniteNumberException,org.apache.commons.math.exception.NotPositiveException,org.apache.commons.math.exception.NotStrictlyPositiveException,org.apache.commons.math.exception.NullArgumentException,org.apache.commons.math.exception.NumberIsTooLargeException,org.apache.commons.math.exception.NumberIsTooSmallException,org.apache.commons.math.exception.TooManyEvaluationsException,org.apache.commons.math.exception.util.ExceptionContextProvider,org.apache.commons.math.exception.util.Localizable,org.apache.commons.math.ode.AbstractIntegrator,org.apache.commons.math.ode.EquationsMapper,org.apache.commons.math.ode.events.EventHandler,org.apache.commons.math.ode.events.EventState,org.apache.commons.math.ode.ExpandableStatefulODE,org.apache.commons.math.ode.FirstOrderDifferentialEquations,org.apache.commons.math.ode.FirstOrderIntegrator,org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator,org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolator,org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator,org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator,org.apache.commons.math.ode.ODEIntegrator,org.apache.commons.math.ode.sampling.AbstractStepInterpolator,org.apache.commons.math.ode.sampling.StepInterpolator,org.apache.commons.math.util.FastMath,org.apache.commons.math.util.FastMathLiteralArrays,org.apache.commons.math.util.Incrementor,org.apache.commons.math.util.MathUtils,org.apache.commons.math.util.Precision
 d4j.dir.src.classes=src/main/java
diff --git a/src/test/java/org/apache/commons/math/complex/ComplexTest.java b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
index 9b8e3fb..6f420d2 100644
--- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java
+++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
@@ -997,6 +997,13 @@ public class ComplexTest {
         Complex z = new Complex(3, 4);
         Complex expected = new Complex(-0.000187346, 0.999356);
         TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
+        /* Check that no overflow occurs (MATH-722) */
+        Complex actual = new Complex(3.0, 1E10).tan();
+        expected = new Complex(0, 1);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
+        actual = new Complex(3.0, -1E10).tan();
+        expected = new Complex(0, -1);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
     }
 
     @Test
@@ -1006,8 +1013,8 @@ public class ComplexTest {
 
     @Test
     public void testTanInf() {
-        TestUtils.assertSame(zeroNaN, oneInf.tan());
-        TestUtils.assertSame(zeroNaN, oneNegInf.tan());
+        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
+        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());
         TestUtils.assertSame(Complex.NaN, infOne.tan());
         TestUtils.assertSame(Complex.NaN, negInfOne.tan());
         TestUtils.assertSame(Complex.NaN, infInf.tan());
@@ -1027,6 +1034,13 @@ public class ComplexTest {
         Complex z = new Complex(3, 4);
         Complex expected = new Complex(1.00071, 0.00490826);
         TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
+        /* Check that no overflow occurs (MATH-722) */
+        Complex actual = new Complex(1E10, 3.0).tanh();
+        expected = new Complex(1, 0);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
+        actual = new Complex(-1E10, 3.0).tanh();
+        expected = new Complex(-1, 0);
+        TestUtils.assertEquals(expected, actual, 1.0e-5);
     }
 
     @Test
@@ -1038,8 +1052,8 @@ public class ComplexTest {
     public void testTanhInf() {
         TestUtils.assertSame(Complex.NaN, oneInf.tanh());
         TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
-        TestUtils.assertSame(nanZero, infOne.tanh());
-        TestUtils.assertSame(nanZero, negInfOne.tanh());
+        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
+        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());
         TestUtils.assertSame(Complex.NaN, infInf.tanh());
         TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
         TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
