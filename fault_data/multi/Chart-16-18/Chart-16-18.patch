diff --git a/defects4j.build.properties b/defects4j.build.properties
index fe978b7..0ace486 100644
--- a/defects4j.build.properties
+++ b/defects4j.build.properties
@@ -1,5 +1,6 @@
 #File automatically generated by Defects4J
 d4j.bug.id=18
+d4j.classes.instrument=org/jfree/chart/util/PublicCloneable.class,org/jfree/chart/util/PublicCloneable\$*.class,org/jfree/data/DataUtilities.class,org/jfree/data/DataUtilities\$*.class,org/jfree/data/DefaultKeyedValues.class,org/jfree/data/DefaultKeyedValues\$*.class,org/jfree/data/DefaultKeyedValues2D.class,org/jfree/data/DefaultKeyedValues2D\$*.class,org/jfree/data/KeyedValues.class,org/jfree/data/KeyedValues\$*.class,org/jfree/data/KeyedValues2D.class,org/jfree/data/KeyedValues2D\$*.class,org/jfree/data/UnknownKeyException.class,org/jfree/data/UnknownKeyException\$*.class,org/jfree/data/Values.class,org/jfree/data/Values\$*.class,org/jfree/data/Values2D.class,org/jfree/data/Values2D\$*.class,org/jfree/data/category/CategoryDataset.class,org/jfree/data/category/CategoryDataset\$*.class,org/jfree/data/category/DefaultCategoryDataset.class,org/jfree/data/category/DefaultCategoryDataset\$*.class,org/jfree/data/category/DefaultIntervalCategoryDataset.class,org/jfree/data/category/DefaultIntervalCategoryDataset\$*.class,org/jfree/data/category/IntervalCategoryDataset.class,org/jfree/data/category/IntervalCategoryDataset\$*.class,org/jfree/data/general/AbstractDataset.class,org/jfree/data/general/AbstractDataset\$*.class,org/jfree/data/general/AbstractSeriesDataset.class,org/jfree/data/general/AbstractSeriesDataset\$*.class,org/jfree/data/general/Dataset.class,org/jfree/data/general/Dataset\$*.class,org/jfree/data/general/DatasetChangeEvent.class,org/jfree/data/general/DatasetChangeEvent\$*.class,org/jfree/data/general/DatasetGroup.class,org/jfree/data/general/DatasetGroup\$*.class,org/jfree/data/general/SeriesChangeListener.class,org/jfree/data/general/SeriesChangeListener\$*.class,org/jfree/data/general/SeriesDataset.class,org/jfree/data/general/SeriesDataset\$*.class,org/jfree/data/resources/DataPackageResources.class,org/jfree/data/resources/DataPackageResources\$*.class
 d4j.classes.modified=org.jfree.data.DefaultKeyedValues,org.jfree.data.DefaultKeyedValues2D
 d4j.classes.relevant=org.jfree.chart.util.PublicCloneable,org.jfree.data.category.CategoryDataset,org.jfree.data.category.DefaultCategoryDataset,org.jfree.data.DefaultKeyedValues,org.jfree.data.DefaultKeyedValues2D,org.jfree.data.general.AbstractDataset,org.jfree.data.general.Dataset,org.jfree.data.general.DatasetChangeEvent,org.jfree.data.general.DatasetGroup,org.jfree.data.KeyedValues,org.jfree.data.KeyedValues2D,org.jfree.data.UnknownKeyException,org.jfree.data.Values,org.jfree.data.Values2D
 d4j.dir.src.classes=source
diff --git a/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java b/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
index 2f9b319..85953c9 100644
--- a/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
+++ b/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
@@ -311,4 +311,75 @@ public class DefaultIntervalCategoryDatasetTests extends TestCase {
         }
         assertTrue(pass);
     }
+    public void testGetCategoryIndex() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+    	assertEquals(-1, empty.getCategoryIndex("ABC"));
+    }
+    public void testSetCategoryKeys() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+    	boolean pass = true;
+    	try {
+    		empty.setCategoryKeys(new String[0]);
+    	}
+    	catch (RuntimeException e) {
+    		pass = false;
+    	}
+    	assertTrue(pass);
+    }
+    public void testGetSeriesIndex() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+    	assertEquals(-1, empty.getSeriesIndex("ABC"));
+    }
+    public void testGetRowCount() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+        assertEquals(0, empty.getColumnCount());
+    }
+    public void testGetRowIndex() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+    	assertEquals(-1, empty.getRowIndex("ABC"));
+    }
+    public void testGetColumnCount() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+        assertEquals(0, empty.getColumnCount());
+    }
+    public void testGetColumnIndex() {
+    	// check an empty dataset
+    	DefaultIntervalCategoryDataset empty 
+    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
+    	        		new double[0][0]);
+    	assertEquals(-1, empty.getColumnIndex("ABC"));
+    }
+    public void testCloning2() {
+    	DefaultIntervalCategoryDataset d1 
+                = new DefaultIntervalCategoryDataset(new double[0][0], 
+        		    new double[0][0]);
+        DefaultIntervalCategoryDataset d2 = null;
+        try {
+            d2 = (DefaultIntervalCategoryDataset) d1.clone();
+        }
+        catch (CloneNotSupportedException e) {
+            e.printStackTrace();
+        }
+        assertTrue(d1 != d2);
+        assertTrue(d1.getClass() == d2.getClass());
+        assertTrue(d1.equals(d2));	
+    }
 }
